{"ast":null,"code":"// src/utils/formatting.js\n\n/**\r\n * Formats a number as currency.\r\n * @param {number|string|null|undefined} value The numeric value to format.\r\n * @param {string} [currency='USD'] The ISO currency code (e.g., 'USD', 'EUR').\r\n * @param {string} [locale='en-US'] The locale string (e.g., 'en-US', 'de-DE').\r\n * @returns {string} Formatted currency string or 'N/A' if value is invalid.\r\n */\nexport const formatCurrency = (value, currency = 'USD', locale = 'en-US') => {\n  // ... (rest of the function code from previous answer)\n  const number = parseFloat(value);\n  if (value === null || value === undefined || isNaN(number)) {\n    return 'N/A';\n  }\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currency,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(number);\n  } catch (error) {\n    console.error(\"Currency formatting error:\", error);\n    return `${currency} ${number.toFixed(2)}`;\n  }\n};\n\n/**\r\n * Formats a date string or Date object into a locale-specific date string.\r\n * @param {string|Date|null|undefined} dateInput The date string or object.\r\n * @param {string} [locale='en-CA'] The locale string (e.g., 'en-CA' for YYYY-MM-DD).\r\n * @returns {string} Formatted date string or 'N/A'.\r\n */\nexport const formatDate = (dateInput, locale = 'en-CA') => {\n  // ... (rest of the function code from previous answer)\n  if (!dateInput) {\n    return 'N/A';\n  }\n  try {\n    const date = new Date(dateInput);\n    if (isNaN(date.getTime())) {\n      return 'Invalid Date';\n    }\n    return new Intl.DateTimeFormat(locale).format(date);\n  } catch (error) {\n    console.error(\"Date formatting error:\", error);\n    return 'Invalid Date';\n  }\n};","map":{"version":3,"names":["formatCurrency","value","currency","locale","number","parseFloat","undefined","isNaN","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","error","console","toFixed","formatDate","dateInput","date","Date","getTime","DateTimeFormat"],"sources":["D:/Harvy/Dev/ProjectManagementSystem/frontend/src/utils/formatting.js"],"sourcesContent":["// src/utils/formatting.js\r\n\r\n/**\r\n * Formats a number as currency.\r\n * @param {number|string|null|undefined} value The numeric value to format.\r\n * @param {string} [currency='USD'] The ISO currency code (e.g., 'USD', 'EUR').\r\n * @param {string} [locale='en-US'] The locale string (e.g., 'en-US', 'de-DE').\r\n * @returns {string} Formatted currency string or 'N/A' if value is invalid.\r\n */\r\nexport const formatCurrency = (value, currency = 'USD', locale = 'en-US') => {\r\n    // ... (rest of the function code from previous answer)\r\n    const number = parseFloat(value);\r\n    if (value === null || value === undefined || isNaN(number)) {\r\n       return 'N/A';\r\n    }\r\n    try {\r\n      return new Intl.NumberFormat(locale, {\r\n        style: 'currency',\r\n        currency: currency,\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2,\r\n      }).format(number);\r\n    } catch (error) {\r\n      console.error(\"Currency formatting error:\", error);\r\n      return `${currency} ${number.toFixed(2)}`;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Formats a date string or Date object into a locale-specific date string.\r\n   * @param {string|Date|null|undefined} dateInput The date string or object.\r\n   * @param {string} [locale='en-CA'] The locale string (e.g., 'en-CA' for YYYY-MM-DD).\r\n   * @returns {string} Formatted date string or 'N/A'.\r\n   */\r\n  export const formatDate = (dateInput, locale = 'en-CA') => {\r\n    // ... (rest of the function code from previous answer)\r\n     if (!dateInput) {\r\n      return 'N/A';\r\n    }\r\n    try {\r\n      const date = new Date(dateInput);\r\n       if (isNaN(date.getTime())) {\r\n           return 'Invalid Date';\r\n       }\r\n      return new Intl.DateTimeFormat(locale).format(date);\r\n    } catch (error) {\r\n      console.error(\"Date formatting error:\", error);\r\n      return 'Invalid Date';\r\n    }\r\n  };"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAACC,KAAK,EAAEC,QAAQ,GAAG,KAAK,EAAEC,MAAM,GAAG,OAAO,KAAK;EACzE;EACA,MAAMC,MAAM,GAAGC,UAAU,CAACJ,KAAK,CAAC;EAChC,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKK,SAAS,IAAIC,KAAK,CAACH,MAAM,CAAC,EAAE;IACzD,OAAO,KAAK;EACf;EACA,IAAI;IACF,OAAO,IAAII,IAAI,CAACC,YAAY,CAACN,MAAM,EAAE;MACnCO,KAAK,EAAE,UAAU;MACjBR,QAAQ,EAAEA,QAAQ;MAClBS,qBAAqB,EAAE,CAAC;MACxBC,qBAAqB,EAAE;IACzB,CAAC,CAAC,CAACC,MAAM,CAACT,MAAM,CAAC;EACnB,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,GAAGZ,QAAQ,IAAIE,MAAM,CAACY,OAAO,CAAC,CAAC,CAAC,EAAE;EAC3C;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,MAAMC,UAAU,GAAGA,CAACC,SAAS,EAAEf,MAAM,GAAG,OAAO,KAAK;EACzD;EACC,IAAI,CAACe,SAAS,EAAE;IACf,OAAO,KAAK;EACd;EACA,IAAI;IACF,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,SAAS,CAAC;IAC/B,IAAIX,KAAK,CAACY,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;MACvB,OAAO,cAAc;IACzB;IACD,OAAO,IAAIb,IAAI,CAACc,cAAc,CAACnB,MAAM,CAAC,CAACU,MAAM,CAACM,IAAI,CAAC;EACrD,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,cAAc;EACvB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}