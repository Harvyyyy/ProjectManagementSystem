{"ast":null,"code":"/**\r\n * Formats a number as currency.\r\n * @param {number | string | null | undefined} amount The amount to format.\r\n * @param {string} currencyCode The ISO currency code (e.g., 'USD', 'EUR', 'PHP'). Defaults to 'PHP'.\r\n * @param {string} locale The locale string (e.g., 'en-US', 'en-PH'). Defaults to 'en-US'.\r\n * @returns {string} Formatted currency string, or an empty string/placeholder if amount is invalid.\r\n */\nexport const formatCurrency = (amount, currencyCode = 'PHP', locale = 'en-US') => {\n  // Defaulting to PHP based on previous code\n  const numericAmount = parseFloat(amount);\n  if (amount === null || amount === undefined || isNaN(numericAmount)) {\n    return ''; // Or return a placeholder like 'N/A' or '-'\n  }\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currencyCode,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(numericAmount);\n  } catch (error) {\n    console.error(\"Currency formatting error:\", error);\n    // Fallback for invalid currency code\n    return `${numericAmount.toFixed(2)} ${currencyCode}`;\n  }\n};\n\n/**\r\n* Formats a date string or Date object.\r\n* Example placeholder - adjust options as needed.\r\n* @param {string | Date | null | undefined} dateInput The date to format.\r\n* @param {object} options Intl.DateTimeFormat options.\r\n* @returns {string} Formatted date string or 'N/A'.\r\n*/\nexport const formatDate = (dateInput, options = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric'\n}) => {\n  if (!dateInput) return 'N/A';\n  try {\n    const date = new Date(dateInput);\n    // Check if date is valid after parsing\n    if (isNaN(date.getTime())) {\n      return 'Invalid Date';\n    }\n    return new Intl.DateTimeFormat('en-US', options).format(date);\n  } catch (error) {\n    console.error(\"Date formatting error:\", error);\n    return 'N/A';\n  }\n};\n\n/**\r\n* Formats a duration given in total minutes into a readable string (e.g., \"1h 30m\").\r\n* @param {number | string | null | undefined} totalMinutes The duration in minutes.\r\n* @returns {string} Formatted duration string, or '0m' if input is invalid or zero.\r\n*/\nexport const formatDuration = totalMinutes => {\n  const minutesValue = totalMinutes === null || totalMinutes === undefined ? 0 : parseInt(totalMinutes, 10);\n  if (isNaN(minutesValue) || minutesValue <= 0) {\n    return '0m';\n  }\n  const minutes = minutesValue % 60;\n  const hours = Math.floor(minutesValue / 60);\n  let result = '';\n  if (hours > 0) {\n    result += `${hours}h`;\n  }\n  if (minutes > 0) {\n    result += `${hours > 0 ? ' ' : ''}${minutes}m`; // Add space if hours exist\n  }\n  return result || '0m'; // Fallback just in case\n};\n\n// Add any other utility functions you might have here...","map":{"version":3,"names":["formatCurrency","amount","currencyCode","locale","numericAmount","parseFloat","undefined","isNaN","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","error","console","toFixed","formatDate","dateInput","options","year","month","day","date","Date","getTime","DateTimeFormat","formatDuration","totalMinutes","minutesValue","parseInt","minutes","hours","Math","floor","result"],"sources":["D:/Harvy/Dev/ProjectManagementSystem/frontend/src/utils/formatting.js"],"sourcesContent":["/**\r\n * Formats a number as currency.\r\n * @param {number | string | null | undefined} amount The amount to format.\r\n * @param {string} currencyCode The ISO currency code (e.g., 'USD', 'EUR', 'PHP'). Defaults to 'PHP'.\r\n * @param {string} locale The locale string (e.g., 'en-US', 'en-PH'). Defaults to 'en-US'.\r\n * @returns {string} Formatted currency string, or an empty string/placeholder if amount is invalid.\r\n */\r\nexport const formatCurrency = (amount, currencyCode = 'PHP', locale = 'en-US') => { // Defaulting to PHP based on previous code\r\n  const numericAmount = parseFloat(amount);\r\n  if (amount === null || amount === undefined || isNaN(numericAmount)) {\r\n      return ''; // Or return a placeholder like 'N/A' or '-'\r\n  }\r\n\r\n  try {\r\n      return new Intl.NumberFormat(locale, {\r\n          style: 'currency',\r\n          currency: currencyCode,\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2\r\n      }).format(numericAmount);\r\n  } catch (error) {\r\n      console.error(\"Currency formatting error:\", error);\r\n      // Fallback for invalid currency code\r\n      return `${numericAmount.toFixed(2)} ${currencyCode}`;\r\n  }\r\n};\r\n\r\n/**\r\n* Formats a date string or Date object.\r\n* Example placeholder - adjust options as needed.\r\n* @param {string | Date | null | undefined} dateInput The date to format.\r\n* @param {object} options Intl.DateTimeFormat options.\r\n* @returns {string} Formatted date string or 'N/A'.\r\n*/\r\nexport const formatDate = (dateInput, options = { year: 'numeric', month: 'short', day: 'numeric' }) => {\r\n  if (!dateInput) return 'N/A';\r\n  try {\r\n      const date = new Date(dateInput);\r\n      // Check if date is valid after parsing\r\n      if (isNaN(date.getTime())) {\r\n           return 'Invalid Date';\r\n      }\r\n      return new Intl.DateTimeFormat('en-US', options).format(date);\r\n  } catch (error) {\r\n      console.error(\"Date formatting error:\", error);\r\n      return 'N/A';\r\n  }\r\n};\r\n\r\n\r\n/**\r\n* Formats a duration given in total minutes into a readable string (e.g., \"1h 30m\").\r\n* @param {number | string | null | undefined} totalMinutes The duration in minutes.\r\n* @returns {string} Formatted duration string, or '0m' if input is invalid or zero.\r\n*/\r\nexport const formatDuration = (totalMinutes) => {\r\nconst minutesValue = totalMinutes === null || totalMinutes === undefined ? 0 : parseInt(totalMinutes, 10);\r\n\r\nif (isNaN(minutesValue) || minutesValue <= 0) {\r\n  return '0m';\r\n}\r\n\r\nconst minutes = minutesValue % 60;\r\nconst hours = Math.floor(minutesValue / 60);\r\n\r\nlet result = '';\r\nif (hours > 0) {\r\n  result += `${hours}h`;\r\n}\r\nif (minutes > 0) {\r\n  result += `${hours > 0 ? ' ' : ''}${minutes}m`; // Add space if hours exist\r\n}\r\n\r\nreturn result || '0m'; // Fallback just in case\r\n};\r\n\r\n// Add any other utility functions you might have here..."],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAACC,MAAM,EAAEC,YAAY,GAAG,KAAK,EAAEC,MAAM,GAAG,OAAO,KAAK;EAAE;EAClF,MAAMC,aAAa,GAAGC,UAAU,CAACJ,MAAM,CAAC;EACxC,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKK,SAAS,IAAIC,KAAK,CAACH,aAAa,CAAC,EAAE;IACjE,OAAO,EAAE,CAAC,CAAC;EACf;EAEA,IAAI;IACA,OAAO,IAAII,IAAI,CAACC,YAAY,CAACN,MAAM,EAAE;MACjCO,KAAK,EAAE,UAAU;MACjBC,QAAQ,EAAET,YAAY;MACtBU,qBAAqB,EAAE,CAAC;MACxBC,qBAAqB,EAAE;IAC3B,CAAC,CAAC,CAACC,MAAM,CAACV,aAAa,CAAC;EAC5B,CAAC,CAAC,OAAOW,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD;IACA,OAAO,GAAGX,aAAa,CAACa,OAAO,CAAC,CAAC,CAAC,IAAIf,YAAY,EAAE;EACxD;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMgB,UAAU,GAAGA,CAACC,SAAS,EAAEC,OAAO,GAAG;EAAEC,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE,OAAO;EAAEC,GAAG,EAAE;AAAU,CAAC,KAAK;EACtG,IAAI,CAACJ,SAAS,EAAE,OAAO,KAAK;EAC5B,IAAI;IACA,MAAMK,IAAI,GAAG,IAAIC,IAAI,CAACN,SAAS,CAAC;IAChC;IACA,IAAIZ,KAAK,CAACiB,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;MACtB,OAAO,cAAc;IAC1B;IACA,OAAO,IAAIlB,IAAI,CAACmB,cAAc,CAAC,OAAO,EAAEP,OAAO,CAAC,CAACN,MAAM,CAACU,IAAI,CAAC;EACjE,CAAC,CAAC,OAAOT,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,KAAK;EAChB;AACF,CAAC;;AAGD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMa,cAAc,GAAIC,YAAY,IAAK;EAChD,MAAMC,YAAY,GAAGD,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAKvB,SAAS,GAAG,CAAC,GAAGyB,QAAQ,CAACF,YAAY,EAAE,EAAE,CAAC;EAEzG,IAAItB,KAAK,CAACuB,YAAY,CAAC,IAAIA,YAAY,IAAI,CAAC,EAAE;IAC5C,OAAO,IAAI;EACb;EAEA,MAAME,OAAO,GAAGF,YAAY,GAAG,EAAE;EACjC,MAAMG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACL,YAAY,GAAG,EAAE,CAAC;EAE3C,IAAIM,MAAM,GAAG,EAAE;EACf,IAAIH,KAAK,GAAG,CAAC,EAAE;IACbG,MAAM,IAAI,GAAGH,KAAK,GAAG;EACvB;EACA,IAAID,OAAO,GAAG,CAAC,EAAE;IACfI,MAAM,IAAI,GAAGH,KAAK,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,GAAGD,OAAO,GAAG,CAAC,CAAC;EAClD;EAEA,OAAOI,MAAM,IAAI,IAAI,CAAC,CAAC;AACvB,CAAC;;AAED","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}