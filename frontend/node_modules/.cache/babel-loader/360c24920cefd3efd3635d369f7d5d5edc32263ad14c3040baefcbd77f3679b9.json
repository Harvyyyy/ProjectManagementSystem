{"ast":null,"code":"var _jsxFileName = \"D:\\\\Harvy\\\\Dev\\\\ProjectManagementSystem\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\ProjectGanttChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../../context/AuthContext'; // Adjust path if needed\nimport { API_BASE_URL } from '../../App'; // Adjust path if needed\nimport { Spinner, Alert } from 'react-bootstrap';\nimport { Chart } from \"react-google-charts\"; // Import Google Chart component\n\n// Define columns needed by Google Charts Gantt\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ganttColumns = [{\n  type: \"string\",\n  label: \"Task ID\"\n}, {\n  type: \"string\",\n  label: \"Task Name\"\n}, {\n  type: \"string\",\n  label: \"Resource\"\n},\n// Optional: Can map to status or assignee\n{\n  type: \"date\",\n  label: \"Start Date\"\n}, {\n  type: \"date\",\n  label: \"End Date\"\n}, {\n  type: \"number\",\n  label: \"Duration\"\n},\n// milliseconds\n{\n  type: \"number\",\n  label: \"Percent Complete\"\n}, {\n  type: \"string\",\n  label: \"Dependencies\"\n} // Task IDs this depends on (comma-separated)\n];\n\n// Function to map task status to percentage for Gantt\nconst getTaskProgress = status => {\n  switch (status === null || status === void 0 ? void 0 : status.toLowerCase()) {\n    case 'completed':\n      return 100;\n    case 'in progress':\n      return 50;\n    // Estimate for in progress\n    case 'pending':\n      return 0;\n    default:\n      return 0;\n  }\n};\nfunction ProjectGanttChart({\n  projectId\n}) {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const [ganttData, setGanttData] = useState([ganttColumns]); // Start with columns header\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const fetchProjectTasks = useCallback(async () => {\n    if (!projectId) return;\n    setLoading(true);\n    setError(null);\n    console.log(`Gantt: Fetching tasks for project ${projectId}`);\n    try {\n      // Fetch ALL tasks for this project (might need a dedicated endpoint or query param)\n      // Using the existing projectTasks route: GET /api/projects/{projectId}/tasks\n      const response = await fetch(`${API_BASE_URL}/projects/${projectId}/tasks`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error ${response.status}: Could not fetch tasks for Gantt.`);\n      }\n      const tasks = await response.json(); // Expecting an array of tasks here\n\n      // --- Format Data for Google Charts ---\n      const formattedData = tasks.map(task => {\n        // Determine start and end dates - use fallbacks if null\n        const startDate = task.created_at ? new Date(task.created_at) : new Date(); // Fallback to now if no created_at? Risky. Better ensure created_at exists.\n        // Use due_date for end, or completion date if available, or start date + 1 day as fallback\n        const endDate = task.completed_at ? new Date(task.completed_at) : task.due_date ? new Date(task.due_date) : new Date(startDate.getTime() + 86400000); // Add 1 day in ms if no due date\n\n        // Ensure end date is after start date for Gantt\n        if (endDate <= startDate) {\n          endDate.setTime(startDate.getTime() + 86400000); // Force end date to be 1 day after start if invalid\n        }\n        return [String(task.id),\n        // Task ID needs to be a string for dependencies\n        task.title,\n        // Task Name\n        task.status,\n        // Resource (using status here)\n        startDate,\n        // Start Date object\n        endDate,\n        // End Date object\n        null,\n        // Duration (in ms) - Google Charts calculates this from start/end\n        getTaskProgress(task.status),\n        // Percent Complete\n        null // Dependencies (leave null for now)\n        ];\n      });\n      setGanttData([ganttColumns, ...formattedData]); // Combine columns header with formatted task data\n      console.log(\"Gantt Data Prepared:\", [ganttColumns, ...formattedData]);\n    } catch (e) {\n      console.error(\"Fetch Gantt tasks error:\", e);\n      setError(e.message || 'Failed to load task data for Gantt chart.');\n      setGanttData([ganttColumns]); // Reset to just columns on error\n    } finally {\n      setLoading(false);\n    }\n  }, [projectId, token]);\n  useEffect(() => {\n    fetchProjectTasks();\n  }, [fetchProjectTasks]); // Re-run when projectId changes\n\n  // Optional: Gantt Chart Options\n  const ganttOptions = {\n    height: ganttData.length * 45 + 50,\n    // Dynamic height based on number of tasks + header\n    gantt: {\n      trackHeight: 40,\n      barCornerRadius: 2,\n      arrow: {\n        // angle: 100,\n        // width: 5,\n        // color: 'grey',\n        // radius: 0\n      },\n      criticalPathEnabled: false,\n      // Disable critical path calculation\n      percentEnabled: true,\n      // Enable % complete display on bars\n      percentDone: '.',\n      // Character for completed part (optional)\n      labelStyle: {\n        fontName: 'Arial',\n        fontSize: 12,\n        color: '#757575' // Example color\n      },\n      shadowEnabled: false\n      // Colors for different statuses (optional)\n      // barColor: { // This property doesn't exist, need to color based on Resource/status column\n      //     'completed': '#dff0d8',\n      //     'in progress': '#d9edf7',\n      //     'pending': '#fcf8e3',\n      // }\n    },\n    tooltip: {\n      isHtml: true\n    } // Allows HTML in tooltips\n  };\n\n  // --- Render Logic ---\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center text-light py-3\",\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\",\n      size: \"sm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 68\n    }, this), \" Loading Gantt Chart...\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Alert, {\n    variant: \"warning\",\n    className: \"bg-dark text-warning border-warning\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 21\n  }, this);\n  if (ganttData.length <= 1) return /*#__PURE__*/_jsxDEV(Alert, {\n    variant: \"info\",\n    className: \"bg-dark text-info border-info\",\n    children: \"No tasks found for this project to display Gantt Chart.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 37\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gantt-chart-container bg-light p-3 rounded\",\n    children: [\" \", /*#__PURE__*/_jsxDEV(Chart, {\n      chartType: \"Gantt\",\n      width: \"100%\",\n      height: \"100%\" // Adjust or calculate height as needed\n      ,\n      data: ganttData,\n      options: ganttOptions,\n      loader: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: \"Loading Chart...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)\n      // chartPackages={['gantt']} // Usually loaded automatically\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n}\n_s(ProjectGanttChart, \"cqwDpmEb4L4Vx8zTuyuRxSOHL9o=\", false, function () {\n  return [useAuth];\n});\n_c = ProjectGanttChart;\nexport default ProjectGanttChart;\nvar _c;\n$RefreshReg$(_c, \"ProjectGanttChart\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useAuth","API_BASE_URL","Spinner","Alert","Chart","jsxDEV","_jsxDEV","ganttColumns","type","label","getTaskProgress","status","toLowerCase","ProjectGanttChart","projectId","_s","token","ganttData","setGanttData","loading","setLoading","error","setError","fetchProjectTasks","console","log","response","fetch","headers","Authorization","Accept","ok","Error","tasks","json","formattedData","map","task","startDate","created_at","Date","endDate","completed_at","due_date","getTime","setTime","String","id","title","e","message","ganttOptions","height","length","gantt","trackHeight","barCornerRadius","arrow","criticalPathEnabled","percentEnabled","percentDone","labelStyle","fontName","fontSize","color","shadowEnabled","tooltip","isHtml","className","children","animation","size","fileName","_jsxFileName","lineNumber","columnNumber","variant","chartType","width","data","options","loader","_c","$RefreshReg$"],"sources":["D:/Harvy/Dev/ProjectManagementSystem/frontend/src/components/Dashboard/ProjectGanttChart.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '../../context/AuthContext'; // Adjust path if needed\r\nimport { API_BASE_URL } from '../../App'; // Adjust path if needed\r\nimport { Spinner, Alert } from 'react-bootstrap';\r\nimport { Chart } from \"react-google-charts\"; // Import Google Chart component\r\n\r\n// Define columns needed by Google Charts Gantt\r\nconst ganttColumns = [\r\n  { type: \"string\", label: \"Task ID\" },\r\n  { type: \"string\", label: \"Task Name\" },\r\n  { type: \"string\", label: \"Resource\" }, // Optional: Can map to status or assignee\r\n  { type: \"date\", label: \"Start Date\" },\r\n  { type: \"date\", label: \"End Date\" },\r\n  { type: \"number\", label: \"Duration\" }, // milliseconds\r\n  { type: \"number\", label: \"Percent Complete\" },\r\n  { type: \"string\", label: \"Dependencies\" }, // Task IDs this depends on (comma-separated)\r\n];\r\n\r\n// Function to map task status to percentage for Gantt\r\nconst getTaskProgress = (status) => {\r\n    switch (status?.toLowerCase()) {\r\n        case 'completed': return 100;\r\n        case 'in progress': return 50; // Estimate for in progress\r\n        case 'pending': return 0;\r\n        default: return 0;\r\n    }\r\n};\r\n\r\nfunction ProjectGanttChart({ projectId }) {\r\n  const { token } = useAuth();\r\n  const [ganttData, setGanttData] = useState([ganttColumns]); // Start with columns header\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchProjectTasks = useCallback(async () => {\r\n    if (!projectId) return;\r\n    setLoading(true);\r\n    setError(null);\r\n    console.log(`Gantt: Fetching tasks for project ${projectId}`);\r\n\r\n    try {\r\n      // Fetch ALL tasks for this project (might need a dedicated endpoint or query param)\r\n      // Using the existing projectTasks route: GET /api/projects/{projectId}/tasks\r\n      const response = await fetch(`${API_BASE_URL}/projects/${projectId}/tasks`, {\r\n        headers: { Authorization: `Bearer ${token}`, Accept: 'application/json' },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error ${response.status}: Could not fetch tasks for Gantt.`);\r\n      }\r\n      const tasks = await response.json(); // Expecting an array of tasks here\r\n\r\n      // --- Format Data for Google Charts ---\r\n      const formattedData = tasks.map(task => {\r\n        // Determine start and end dates - use fallbacks if null\r\n        const startDate = task.created_at ? new Date(task.created_at) : new Date(); // Fallback to now if no created_at? Risky. Better ensure created_at exists.\r\n        // Use due_date for end, or completion date if available, or start date + 1 day as fallback\r\n        const endDate = task.completed_at ? new Date(task.completed_at) : (task.due_date ? new Date(task.due_date) : new Date(startDate.getTime() + 86400000)); // Add 1 day in ms if no due date\r\n\r\n         // Ensure end date is after start date for Gantt\r\n         if (endDate <= startDate) {\r\n             endDate.setTime(startDate.getTime() + 86400000); // Force end date to be 1 day after start if invalid\r\n         }\r\n\r\n        return [\r\n          String(task.id), // Task ID needs to be a string for dependencies\r\n          task.title, // Task Name\r\n          task.status, // Resource (using status here)\r\n          startDate, // Start Date object\r\n          endDate, // End Date object\r\n          null, // Duration (in ms) - Google Charts calculates this from start/end\r\n          getTaskProgress(task.status), // Percent Complete\r\n          null, // Dependencies (leave null for now)\r\n        ];\r\n      });\r\n\r\n      setGanttData([ganttColumns, ...formattedData]); // Combine columns header with formatted task data\r\n      console.log(\"Gantt Data Prepared:\", [ganttColumns, ...formattedData]);\r\n\r\n\r\n    } catch (e) {\r\n      console.error(\"Fetch Gantt tasks error:\", e);\r\n      setError(e.message || 'Failed to load task data for Gantt chart.');\r\n      setGanttData([ganttColumns]); // Reset to just columns on error\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [projectId, token]);\r\n\r\n  useEffect(() => {\r\n    fetchProjectTasks();\r\n  }, [fetchProjectTasks]); // Re-run when projectId changes\r\n\r\n\r\n  // Optional: Gantt Chart Options\r\n  const ganttOptions = {\r\n      height: ganttData.length * 45 + 50, // Dynamic height based on number of tasks + header\r\n      gantt: {\r\n          trackHeight: 40,\r\n          barCornerRadius: 2,\r\n          arrow: {\r\n              // angle: 100,\r\n              // width: 5,\r\n              // color: 'grey',\r\n              // radius: 0\r\n          },\r\n          criticalPathEnabled: false, // Disable critical path calculation\r\n          percentEnabled: true,       // Enable % complete display on bars\r\n          percentDone:'.', // Character for completed part (optional)\r\n          labelStyle: {\r\n            fontName: 'Arial',\r\n            fontSize: 12,\r\n            color: '#757575', // Example color\r\n          },\r\n          shadowEnabled: false,\r\n          // Colors for different statuses (optional)\r\n          // barColor: { // This property doesn't exist, need to color based on Resource/status column\r\n          //     'completed': '#dff0d8',\r\n          //     'in progress': '#d9edf7',\r\n          //     'pending': '#fcf8e3',\r\n          // }\r\n      },\r\n       tooltip: { isHtml: true }, // Allows HTML in tooltips\r\n  };\r\n\r\n\r\n  // --- Render Logic ---\r\n  if (loading) return <div className=\"text-center text-light py-3\"><Spinner animation=\"border\" size=\"sm\" /> Loading Gantt Chart...</div>;\r\n  if (error) return <Alert variant=\"warning\" className=\"bg-dark text-warning border-warning\">{error}</Alert>;\r\n  if (ganttData.length <= 1) return <Alert variant=\"info\" className=\"bg-dark text-info border-info\">No tasks found for this project to display Gantt Chart.</Alert>;\r\n\r\n  return (\r\n    <div className=\"gantt-chart-container bg-light p-3 rounded\"> {/* Add background for chart visibility */}\r\n      <Chart\r\n        chartType=\"Gantt\"\r\n        width=\"100%\"\r\n        height=\"100%\" // Adjust or calculate height as needed\r\n        data={ganttData}\r\n        options={ganttOptions}\r\n        loader={<div className=\"text-center\">Loading Chart...</div>}\r\n        // chartPackages={['gantt']} // Usually loaded automatically\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectGanttChart;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,OAAO,QAAQ,2BAA2B,CAAC,CAAC;AACrD,SAASC,YAAY,QAAQ,WAAW,CAAC,CAAC;AAC1C,SAASC,OAAO,EAAEC,KAAK,QAAQ,iBAAiB;AAChD,SAASC,KAAK,QAAQ,qBAAqB,CAAC,CAAC;;AAE7C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAG,CACnB;EAAEC,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAU,CAAC,EACpC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAY,CAAC,EACtC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAW,CAAC;AAAE;AACvC;EAAED,IAAI,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAa,CAAC,EACrC;EAAED,IAAI,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAW,CAAC,EACnC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAW,CAAC;AAAE;AACvC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAmB,CAAC,EAC7C;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAe,CAAC,CAAE;AAAA,CAC5C;;AAED;AACA,MAAMC,eAAe,GAAIC,MAAM,IAAK;EAChC,QAAQA,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,WAAW,CAAC,CAAC;IACzB,KAAK,WAAW;MAAE,OAAO,GAAG;IAC5B,KAAK,aAAa;MAAE,OAAO,EAAE;IAAE;IAC/B,KAAK,SAAS;MAAE,OAAO,CAAC;IACxB;MAAS,OAAO,CAAC;EACrB;AACJ,CAAC;AAED,SAASC,iBAAiBA,CAAC;EAAEC;AAAU,CAAC,EAAE;EAAAC,EAAA;EACxC,MAAM;IAAEC;EAAM,CAAC,GAAGhB,OAAO,CAAC,CAAC;EAC3B,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGrB,QAAQ,CAAC,CAACU,YAAY,CAAC,CAAC,CAAC,CAAC;EAC5D,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACwB,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAM0B,iBAAiB,GAAGxB,WAAW,CAAC,YAAY;IAChD,IAAI,CAACe,SAAS,EAAE;IAChBM,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IACdE,OAAO,CAACC,GAAG,CAAC,qCAAqCX,SAAS,EAAE,CAAC;IAE7D,IAAI;MACF;MACA;MACA,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG1B,YAAY,aAAaa,SAAS,QAAQ,EAAE;QAC1Ec,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUb,KAAK,EAAE;UAAEc,MAAM,EAAE;QAAmB;MAC1E,CAAC,CAAC;MAEF,IAAI,CAACJ,QAAQ,CAACK,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,cAAcN,QAAQ,CAACf,MAAM,oCAAoC,CAAC;MACpF;MACA,MAAMsB,KAAK,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC,CAAC;;MAErC;MACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,GAAG,CAACC,IAAI,IAAI;QACtC;QACA,MAAMC,SAAS,GAAGD,IAAI,CAACE,UAAU,GAAG,IAAIC,IAAI,CAACH,IAAI,CAACE,UAAU,CAAC,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5E;QACA,MAAMC,OAAO,GAAGJ,IAAI,CAACK,YAAY,GAAG,IAAIF,IAAI,CAACH,IAAI,CAACK,YAAY,CAAC,GAAIL,IAAI,CAACM,QAAQ,GAAG,IAAIH,IAAI,CAACH,IAAI,CAACM,QAAQ,CAAC,GAAG,IAAIH,IAAI,CAACF,SAAS,CAACM,OAAO,CAAC,CAAC,GAAG,QAAQ,CAAE,CAAC,CAAC;;QAEvJ;QACA,IAAIH,OAAO,IAAIH,SAAS,EAAE;UACtBG,OAAO,CAACI,OAAO,CAACP,SAAS,CAACM,OAAO,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC;QACrD;QAED,OAAO,CACLE,MAAM,CAACT,IAAI,CAACU,EAAE,CAAC;QAAE;QACjBV,IAAI,CAACW,KAAK;QAAE;QACZX,IAAI,CAAC1B,MAAM;QAAE;QACb2B,SAAS;QAAE;QACXG,OAAO;QAAE;QACT,IAAI;QAAE;QACN/B,eAAe,CAAC2B,IAAI,CAAC1B,MAAM,CAAC;QAAE;QAC9B,IAAI,CAAE;QAAA,CACP;MACH,CAAC,CAAC;MAEFO,YAAY,CAAC,CAACX,YAAY,EAAE,GAAG4B,aAAa,CAAC,CAAC,CAAC,CAAC;MAChDX,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE,CAAClB,YAAY,EAAE,GAAG4B,aAAa,CAAC,CAAC;IAGvE,CAAC,CAAC,OAAOc,CAAC,EAAE;MACVzB,OAAO,CAACH,KAAK,CAAC,0BAA0B,EAAE4B,CAAC,CAAC;MAC5C3B,QAAQ,CAAC2B,CAAC,CAACC,OAAO,IAAI,2CAA2C,CAAC;MAClEhC,YAAY,CAAC,CAACX,YAAY,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,SAAS;MACRa,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,CAACN,SAAS,EAAEE,KAAK,CAAC,CAAC;EAEtBlB,SAAS,CAAC,MAAM;IACdyB,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACA,iBAAiB,CAAC,CAAC,CAAC,CAAC;;EAGzB;EACA,MAAM4B,YAAY,GAAG;IACjBC,MAAM,EAAEnC,SAAS,CAACoC,MAAM,GAAG,EAAE,GAAG,EAAE;IAAE;IACpCC,KAAK,EAAE;MACHC,WAAW,EAAE,EAAE;MACfC,eAAe,EAAE,CAAC;MAClBC,KAAK,EAAE;QACH;QACA;QACA;QACA;MAAA,CACH;MACDC,mBAAmB,EAAE,KAAK;MAAE;MAC5BC,cAAc,EAAE,IAAI;MAAQ;MAC5BC,WAAW,EAAC,GAAG;MAAE;MACjBC,UAAU,EAAE;QACVC,QAAQ,EAAE,OAAO;QACjBC,QAAQ,EAAE,EAAE;QACZC,KAAK,EAAE,SAAS,CAAE;MACpB,CAAC;MACDC,aAAa,EAAE;MACf;MACA;MACA;MACA;MACA;MACA;IACJ,CAAC;IACAC,OAAO,EAAE;MAAEC,MAAM,EAAE;IAAK,CAAC,CAAE;EAChC,CAAC;;EAGD;EACA,IAAIhD,OAAO,EAAE,oBAAOb,OAAA;IAAK8D,SAAS,EAAC,6BAA6B;IAAAC,QAAA,gBAAC/D,OAAA,CAACJ,OAAO;MAACoE,SAAS,EAAC,QAAQ;MAACC,IAAI,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,2BAAuB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACtI,IAAItD,KAAK,EAAE,oBAAOf,OAAA,CAACH,KAAK;IAACyE,OAAO,EAAC,SAAS;IAACR,SAAS,EAAC,qCAAqC;IAAAC,QAAA,EAAEhD;EAAK;IAAAmD,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;EAC1G,IAAI1D,SAAS,CAACoC,MAAM,IAAI,CAAC,EAAE,oBAAO/C,OAAA,CAACH,KAAK;IAACyE,OAAO,EAAC,MAAM;IAACR,SAAS,EAAC,+BAA+B;IAAAC,QAAA,EAAC;EAAuD;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;EAEjK,oBACErE,OAAA;IAAK8D,SAAS,EAAC,4CAA4C;IAAAC,QAAA,GAAC,GAAC,eAC3D/D,OAAA,CAACF,KAAK;MACJyE,SAAS,EAAC,OAAO;MACjBC,KAAK,EAAC,MAAM;MACZ1B,MAAM,EAAC,MAAM,CAAC;MAAA;MACd2B,IAAI,EAAE9D,SAAU;MAChB+D,OAAO,EAAE7B,YAAa;MACtB8B,MAAM,eAAE3E,OAAA;QAAK8D,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAgB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;MAC1D;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC5D,EAAA,CApHQF,iBAAiB;EAAA,QACNb,OAAO;AAAA;AAAAkF,EAAA,GADlBrE,iBAAiB;AAsH1B,eAAeA,iBAAiB;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}