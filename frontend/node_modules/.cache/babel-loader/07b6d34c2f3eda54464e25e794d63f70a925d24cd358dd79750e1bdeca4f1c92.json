{"ast":null,"code":"/**\r\n * Formats a number as currency.\r\n * @param {number | string | null | undefined} amount The amount to format.\r\n * @param {string} currencyCode The ISO currency code (e.g., 'USD', 'EUR', 'PHP'). Defaults to 'PHP'.\r\n * @param {string} locale The locale string (e.g., 'en-US', 'en-PH'). Defaults to 'en-US'.\r\n * @returns {string} Formatted currency string, or an empty string/placeholder if amount is invalid.\r\n */\nexport const formatCurrency = (amount, currencyCode = 'PHP', locale = 'en-US') => {\n  const numericAmount = parseFloat(amount);\n  if (amount === null || amount === undefined || isNaN(numericAmount)) {\n    // Return empty string or a placeholder like '-' or 'N/A'\n    return '';\n    // return '-';\n  }\n  try {\n    return new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency: currencyCode,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(numericAmount);\n  } catch (error) {\n    console.error(\"Currency formatting error:\", error, \"Amount:\", amount, \"Code:\", currencyCode);\n    // Fallback for invalid currency code or other errors\n    return `${numericAmount.toFixed(2)} ${currencyCode}`;\n  }\n};\n\n/**\r\n* Formats a date string or Date object, now including time by default.\r\n* @param {string | Date | null | undefined} dateInput The date/datetime to format.\r\n* @param {object} options Intl.DateTimeFormat options. Defaults to date and time.\r\n* @returns {string} Formatted date/time string or 'N/A'.\r\n*/\nexport const formatDate = (dateInput,\n// Default options now include time\noptions = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit'\n  // hour12: true // Optional: uncomment for AM/PM\n}) => {\n  if (!dateInput) return 'N/A'; // Handle null, undefined, empty string input gracefully\n\n  try {\n    // Attempt to parse the input into a Date object\n    const date = new Date(dateInput);\n\n    // Check if the resulting date is valid\n    if (isNaN(date.getTime())) {\n      console.warn(\"Invalid date input received by formatDate:\", dateInput);\n      return 'Invalid Date'; // Indicate the input was bad\n    }\n\n    // Use 'en-US' locale as a default, can be overridden if needed\n    return new Intl.DateTimeFormat('en-US', options).format(date);\n  } catch (error) {\n    // Catch potential errors during formatting (e.g., invalid locale/options)\n    console.error(\"Date formatting error:\", error, \"Input:\", dateInput, \"Options:\", options);\n    return 'Formatting Error'; // Indicate a formatting issue\n  }\n};\n\n/**\r\n* Formats a duration given in total minutes into a readable string (e.g., \"1h 30m\").\r\n* @param {number | string | null | undefined} totalMinutes The duration in minutes.\r\n* @returns {string} Formatted duration string, or '0m' if input is invalid or zero.\r\n*/\nexport const formatDuration = totalMinutes => {\n  // Safely parse input, defaulting to 0 for null/undefined/non-numeric strings\n  const minutesValue = totalMinutes === null || totalMinutes === undefined ? 0 : parseInt(totalMinutes, 10);\n\n  // Check if parsing failed or value is non-positive\n  if (isNaN(minutesValue) || minutesValue <= 0) {\n    return '0m'; // Return '0m' for zero or invalid duration\n  }\n  const minutes = minutesValue % 60;\n  const hours = Math.floor(minutesValue / 60);\n  let result = '';\n  if (hours > 0) {\n    result += `${hours}h`;\n  }\n  if (minutes > 0) {\n    // Add a space only if hours were also added\n    result += `${hours > 0 ? ' ' : ''}${minutes}m`;\n  }\n\n  // Fallback ensures '0m' is returned if calculations somehow result in empty string\n  return result || '0m';\n};\n\n// Add any other utility functions you export from this file below...","map":{"version":3,"names":["formatCurrency","amount","currencyCode","locale","numericAmount","parseFloat","undefined","isNaN","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","error","console","toFixed","formatDate","dateInput","options","year","month","day","hour","minute","date","Date","getTime","warn","DateTimeFormat","formatDuration","totalMinutes","minutesValue","parseInt","minutes","hours","Math","floor","result"],"sources":["D:/Harvy/Dev/ProjectManagementSystem/frontend/src/utils/formatting.js"],"sourcesContent":["/**\r\n * Formats a number as currency.\r\n * @param {number | string | null | undefined} amount The amount to format.\r\n * @param {string} currencyCode The ISO currency code (e.g., 'USD', 'EUR', 'PHP'). Defaults to 'PHP'.\r\n * @param {string} locale The locale string (e.g., 'en-US', 'en-PH'). Defaults to 'en-US'.\r\n * @returns {string} Formatted currency string, or an empty string/placeholder if amount is invalid.\r\n */\r\nexport const formatCurrency = (amount, currencyCode = 'PHP', locale = 'en-US') => {\r\n  const numericAmount = parseFloat(amount);\r\n  if (amount === null || amount === undefined || isNaN(numericAmount)) {\r\n      // Return empty string or a placeholder like '-' or 'N/A'\r\n      return '';\r\n      // return '-';\r\n  }\r\n\r\n  try {\r\n      return new Intl.NumberFormat(locale, {\r\n          style: 'currency',\r\n          currency: currencyCode,\r\n          minimumFractionDigits: 2,\r\n          maximumFractionDigits: 2\r\n      }).format(numericAmount);\r\n  } catch (error) {\r\n      console.error(\"Currency formatting error:\", error, \"Amount:\", amount, \"Code:\", currencyCode);\r\n      // Fallback for invalid currency code or other errors\r\n      return `${numericAmount.toFixed(2)} ${currencyCode}`;\r\n  }\r\n};\r\n\r\n/**\r\n* Formats a date string or Date object, now including time by default.\r\n* @param {string | Date | null | undefined} dateInput The date/datetime to format.\r\n* @param {object} options Intl.DateTimeFormat options. Defaults to date and time.\r\n* @returns {string} Formatted date/time string or 'N/A'.\r\n*/\r\nexport const formatDate = (\r\n  dateInput,\r\n  // Default options now include time\r\n  options = {\r\n      year: 'numeric', month: 'short', day: 'numeric',\r\n      hour: 'numeric', minute: '2-digit',\r\n      // hour12: true // Optional: uncomment for AM/PM\r\n  }\r\n) => {\r\nif (!dateInput) return 'N/A'; // Handle null, undefined, empty string input gracefully\r\n\r\ntry {\r\n    // Attempt to parse the input into a Date object\r\n    const date = new Date(dateInput);\r\n\r\n    // Check if the resulting date is valid\r\n    if (isNaN(date.getTime())) {\r\n         console.warn(\"Invalid date input received by formatDate:\", dateInput);\r\n         return 'Invalid Date'; // Indicate the input was bad\r\n    }\r\n\r\n    // Use 'en-US' locale as a default, can be overridden if needed\r\n    return new Intl.DateTimeFormat('en-US', options).format(date);\r\n} catch (error) {\r\n    // Catch potential errors during formatting (e.g., invalid locale/options)\r\n    console.error(\"Date formatting error:\", error, \"Input:\", dateInput, \"Options:\", options);\r\n    return 'Formatting Error'; // Indicate a formatting issue\r\n}\r\n};\r\n\r\n\r\n/**\r\n* Formats a duration given in total minutes into a readable string (e.g., \"1h 30m\").\r\n* @param {number | string | null | undefined} totalMinutes The duration in minutes.\r\n* @returns {string} Formatted duration string, or '0m' if input is invalid or zero.\r\n*/\r\nexport const formatDuration = (totalMinutes) => {\r\n  // Safely parse input, defaulting to 0 for null/undefined/non-numeric strings\r\n  const minutesValue = totalMinutes === null || totalMinutes === undefined ? 0 : parseInt(totalMinutes, 10);\r\n\r\n  // Check if parsing failed or value is non-positive\r\n  if (isNaN(minutesValue) || minutesValue <= 0) {\r\n      return '0m'; // Return '0m' for zero or invalid duration\r\n  }\r\n\r\n  const minutes = minutesValue % 60;\r\n  const hours = Math.floor(minutesValue / 60);\r\n\r\n  let result = '';\r\n  if (hours > 0) {\r\n      result += `${hours}h`;\r\n  }\r\n  if (minutes > 0) {\r\n      // Add a space only if hours were also added\r\n      result += `${hours > 0 ? ' ' : ''}${minutes}m`;\r\n  }\r\n\r\n  // Fallback ensures '0m' is returned if calculations somehow result in empty string\r\n  return result || '0m';\r\n};\r\n\r\n// Add any other utility functions you export from this file below..."],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}