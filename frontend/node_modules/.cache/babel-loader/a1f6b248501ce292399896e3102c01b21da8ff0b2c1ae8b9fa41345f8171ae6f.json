{"ast":null,"code":"var _jsxFileName = \"D:\\\\Harvy\\\\Dev\\\\ProjectManagementSystem\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\ProjectGanttChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../../context/AuthContext'; // Adjust path if needed\nimport { API_BASE_URL } from '../../App'; // Adjust path if needed\nimport { Spinner, Alert } from 'react-bootstrap';\nimport { Chart } from \"react-google-charts\"; // Import Google Chart component\n\n// Define columns needed by Google Charts Gantt\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ganttColumns = [{\n  type: \"string\",\n  label: \"Task ID\"\n}, {\n  type: \"string\",\n  label: \"Task Name\"\n}, {\n  type: \"string\",\n  label: \"Resource\"\n},\n// Using task status here\n{\n  type: \"date\",\n  label: \"Start Date\"\n}, {\n  type: \"date\",\n  label: \"End Date\"\n}, {\n  type: \"number\",\n  label: \"Duration\"\n},\n// milliseconds (Google calculates)\n{\n  type: \"number\",\n  label: \"Percent Complete\"\n}, {\n  type: \"string\",\n  label: \"Dependencies\"\n}];\n\n// Function to map task status to percentage for Gantt\nconst getTaskProgress = status => {\n  switch (status === null || status === void 0 ? void 0 : status.toLowerCase()) {\n    case 'completed':\n      return 100;\n    case 'in progress':\n      return 50;\n    // Estimate for in progress\n    case 'pending':\n      return 0;\n    default:\n      return 0;\n  }\n};\nfunction ProjectGanttChart({\n  projectId\n}) {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const [ganttData, setGanttData] = useState([ganttColumns]); // Start with columns header\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // --- Data Fetching Logic ---\n  const fetchProjectTasks = useCallback(async () => {\n    if (!projectId) return;\n    setLoading(true);\n    setError(null);\n    console.log(`Gantt: Fetching tasks for project ${projectId}`);\n    try {\n      // Fetch ALL tasks for this project\n      // Ensure backend endpoint '/api/projects/{projectId}/tasks' returns tasks with created_at, due_date, completed_at, status, title, id\n      const response = await fetch(`${API_BASE_URL}/projects/${projectId}/tasks`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error ${response.status}: Could not fetch tasks for Gantt.`);\n      }\n      const tasks = await response.json(); // Expecting an array of tasks\n\n      // --- Format Data for Google Charts ---\n      const formattedData = tasks.map(task => {\n        // Use created_at as Start Date - Ensure this is always present\n        const startDate = task.created_at ? new Date(task.created_at) : new Date(); // Fallback, but created_at should exist\n        // Use completed_at if available, otherwise due_date, otherwise start + 1 day\n        let endDate = new Date(startDate.getTime() + 86400000); // Default to start + 1 day\n        if (task.completed_at) {\n          endDate = new Date(task.completed_at);\n        } else if (task.due_date) {\n          endDate = new Date(task.due_date);\n        }\n\n        // Ensure end date is strictly after start date for Gantt rendering\n        if (endDate <= startDate) {\n          // Set end date to be at least a small duration after start if invalid\n          endDate.setTime(startDate.getTime() + 3600000); // e.g., 1 hour later\n        }\n        return [String(task.id),\n        // Task ID (string)\n        task.title,\n        // Task Name (string)\n        task.status,\n        // Resource (string - using status)\n        startDate,\n        // Start Date (Date object)\n        endDate,\n        // End Date (Date object)\n        null,\n        // Duration (null - let Google calculate)\n        getTaskProgress(task.status),\n        // Percent Complete (number)\n        null // Dependencies (string - null for now)\n        ];\n      });\n\n      // Combine headers and formatted task data\n      setGanttData([ganttColumns, ...formattedData]);\n      console.log(\"Gantt Data Prepared:\", [ganttColumns, ...formattedData]);\n    } catch (e) {\n      console.error(\"Fetch Gantt tasks error:\", e);\n      setError(e.message || 'Failed to load task data for Gantt chart.');\n      setGanttData([ganttColumns]); // Reset to just columns on error\n    } finally {\n      setLoading(false);\n    }\n  }, [projectId, token]);\n  useEffect(() => {\n    fetchProjectTasks();\n  }, [fetchProjectTasks]); // Re-run when projectId changes\n\n  // --- Gantt Chart Options ---\n  const ganttOptions = {\n    // Calculate height dynamically, ensure minimum height if no tasks\n    height: ganttData.length > 1 ? ganttData.length * 40 + 50 : 200,\n    gantt: {\n      trackHeight: 35,\n      // Height of each task row\n      barCornerRadius: 2,\n      // Slightly rounded bars\n      // --- Custom Palette for Dark Theme ---\n      palette: [\n      // Define color sets. Google Charts cycles through these for different 'Resources'.\n      // Order might matter more than explicit mapping by name.\n      // Adjust these hex codes to match your theme.\n      {\n        // Corresponds potentially to 'pending' or first status encountered\n        \"color\": \"#6c757d\",\n        // Bootstrap secondary grey\n        \"dark\": \"#5a6268\",\n        \"light\": \"#adb5bd\"\n      }, {\n        // Corresponds potentially to 'in progress' or second status encountered\n        \"color\": \"#0dcaf0\",\n        // Bootstrap info teal\n        \"dark\": \"#0baccc\",\n        \"light\": \"#3ee6ff\"\n      }, {\n        // Corresponds potentially to 'completed' or third status encountered\n        \"color\": \"#198754\",\n        // Bootstrap success green\n        \"dark\": \"#146c43\",\n        \"light\": \"#1f9d67\"\n      }, {\n        // Example extra color if needed\n        \"color\": \"#ffc107\",\n        // Bootstrap warning yellow\n        \"dark\": \"#d39e00\",\n        \"light\": \"#ffca2c\"\n      }],\n      // --- End Custom Palette ---\n      criticalPathEnabled: false,\n      // Typically false for project tasks unless dependencies are set\n      percentEnabled: true,\n      // Show completion percentage overlay\n      percentDone: '.',\n      // Character used for the completed part of the bar\n      labelStyle: {\n        // Style for task names on the left\n        fontName: 'Segoe UI, Tahoma, Geneva, Verdana, sans-serif',\n        // Example font\n        fontSize: 12,\n        color: '#e9ecef' // Light gray text for dark background\n      },\n      innerGridTrack: {\n        fill: '#343a40'\n      },\n      // Darker track background (Bootstrap dark gray)\n      innerGridDarkTrack: {\n        fill: '#212529'\n      },\n      // Even darker alternating track (Bootstrap darker gray)\n      labelMaxWidth: 180,\n      // Limit width of task labels\n      backgroundColor: {\n        // Chart area background\n        fill: '#212529' // Match dark theme background\n        // stroke: '#495057',    // Optional border color\n        // strokeWidth: 1\n      },\n      // Style the vertical grid lines\n      gridlineColor: '#495057',\n      // Dark gray grid lines\n\n      // Style the task bars text (percentage)\n      barTextStyle: {\n        color: '#ffffff',\n        fontSize: 10\n      },\n      // White text on bars\n      barHeight: 20 // Thinner bars\n\n      // Default bar color if palette doesn't match (less useful with palette)\n      // defaultBarColor: '#888888'\n    },\n    tooltip: {\n      isHtml: true\n    } // Allow richer tooltips if needed later\n  };\n  // --- END Options ---\n\n  // --- Render Logic ---\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center text-light py-3\",\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\",\n      size: \"sm\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 68\n    }, this), \" Loading Gantt Chart...\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(Alert, {\n    variant: \"warning\",\n    className: \"bg-dark text-warning border-warning\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 21\n  }, this);\n  // Check if there's actual task data, not just the header row\n  if (ganttData.length <= 1) return /*#__PURE__*/_jsxDEV(Alert, {\n    variant: \"info\",\n    className: \"bg-dark text-info border-info\",\n    children: \"No task data available for Gantt Chart display.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 37\n  }, this);\n  return (\n    /*#__PURE__*/\n    // Use a container - background set internally by chart options now\n    _jsxDEV(\"div\", {\n      className: \"gantt-chart-container\",\n      style: {\n        border: '1px solid #495057',\n        borderRadius: '0.375rem'\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(Chart, {\n        chartType: \"Gantt\",\n        width: \"100%\"\n        // Height is now controlled by options based on data length\n        ,\n        height: ganttOptions.height // Pass calculated height\n        ,\n        data: ganttData,\n        options: ganttOptions,\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center\",\n          children: \"Loading Chart...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }, this)\n        // Optional: Define specific chart packages if needed (usually automatic)\n        // chartPackages={['gantt']}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(ProjectGanttChart, \"cqwDpmEb4L4Vx8zTuyuRxSOHL9o=\", false, function () {\n  return [useAuth];\n});\n_c = ProjectGanttChart;\nexport default ProjectGanttChart;\nvar _c;\n$RefreshReg$(_c, \"ProjectGanttChart\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useAuth","API_BASE_URL","Spinner","Alert","Chart","jsxDEV","_jsxDEV","ganttColumns","type","label","getTaskProgress","status","toLowerCase","ProjectGanttChart","projectId","_s","token","ganttData","setGanttData","loading","setLoading","error","setError","fetchProjectTasks","console","log","response","fetch","headers","Authorization","Accept","ok","Error","tasks","json","formattedData","map","task","startDate","created_at","Date","endDate","getTime","completed_at","due_date","setTime","String","id","title","e","message","ganttOptions","height","length","gantt","trackHeight","barCornerRadius","palette","criticalPathEnabled","percentEnabled","percentDone","labelStyle","fontName","fontSize","color","innerGridTrack","fill","innerGridDarkTrack","labelMaxWidth","backgroundColor","gridlineColor","barTextStyle","barHeight","tooltip","isHtml","className","children","animation","size","fileName","_jsxFileName","lineNumber","columnNumber","variant","style","border","borderRadius","chartType","width","data","options","loader","_c","$RefreshReg$"],"sources":["D:/Harvy/Dev/ProjectManagementSystem/frontend/src/components/Dashboard/ProjectGanttChart.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '../../context/AuthContext'; // Adjust path if needed\r\nimport { API_BASE_URL } from '../../App'; // Adjust path if needed\r\nimport { Spinner, Alert } from 'react-bootstrap';\r\nimport { Chart } from \"react-google-charts\"; // Import Google Chart component\r\n\r\n// Define columns needed by Google Charts Gantt\r\nconst ganttColumns = [\r\n  { type: \"string\", label: \"Task ID\" },\r\n  { type: \"string\", label: \"Task Name\" },\r\n  { type: \"string\", label: \"Resource\" }, // Using task status here\r\n  { type: \"date\", label: \"Start Date\" },\r\n  { type: \"date\", label: \"End Date\" },\r\n  { type: \"number\", label: \"Duration\" }, // milliseconds (Google calculates)\r\n  { type: \"number\", label: \"Percent Complete\" },\r\n  { type: \"string\", label: \"Dependencies\" },\r\n];\r\n\r\n// Function to map task status to percentage for Gantt\r\nconst getTaskProgress = (status) => {\r\n    switch (status?.toLowerCase()) {\r\n        case 'completed': return 100;\r\n        case 'in progress': return 50; // Estimate for in progress\r\n        case 'pending': return 0;\r\n        default: return 0;\r\n    }\r\n};\r\n\r\nfunction ProjectGanttChart({ projectId }) {\r\n  const { token } = useAuth();\r\n  const [ganttData, setGanttData] = useState([ganttColumns]); // Start with columns header\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // --- Data Fetching Logic ---\r\n  const fetchProjectTasks = useCallback(async () => {\r\n    if (!projectId) return;\r\n    setLoading(true);\r\n    setError(null);\r\n    console.log(`Gantt: Fetching tasks for project ${projectId}`);\r\n\r\n    try {\r\n      // Fetch ALL tasks for this project\r\n      // Ensure backend endpoint '/api/projects/{projectId}/tasks' returns tasks with created_at, due_date, completed_at, status, title, id\r\n      const response = await fetch(`${API_BASE_URL}/projects/${projectId}/tasks`, {\r\n        headers: { Authorization: `Bearer ${token}`, Accept: 'application/json' },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error ${response.status}: Could not fetch tasks for Gantt.`);\r\n      }\r\n      const tasks = await response.json(); // Expecting an array of tasks\r\n\r\n      // --- Format Data for Google Charts ---\r\n      const formattedData = tasks.map(task => {\r\n        // Use created_at as Start Date - Ensure this is always present\r\n        const startDate = task.created_at ? new Date(task.created_at) : new Date(); // Fallback, but created_at should exist\r\n        // Use completed_at if available, otherwise due_date, otherwise start + 1 day\r\n        let endDate = new Date(startDate.getTime() + 86400000); // Default to start + 1 day\r\n        if (task.completed_at) {\r\n            endDate = new Date(task.completed_at);\r\n        } else if (task.due_date) {\r\n            endDate = new Date(task.due_date);\r\n        }\r\n\r\n        // Ensure end date is strictly after start date for Gantt rendering\r\n         if (endDate <= startDate) {\r\n             // Set end date to be at least a small duration after start if invalid\r\n             endDate.setTime(startDate.getTime() + 3600000); // e.g., 1 hour later\r\n         }\r\n\r\n        return [\r\n          String(task.id),                // Task ID (string)\r\n          task.title,                     // Task Name (string)\r\n          task.status,                    // Resource (string - using status)\r\n          startDate,                      // Start Date (Date object)\r\n          endDate,                        // End Date (Date object)\r\n          null,                           // Duration (null - let Google calculate)\r\n          getTaskProgress(task.status),   // Percent Complete (number)\r\n          null,                           // Dependencies (string - null for now)\r\n        ];\r\n      });\r\n\r\n      // Combine headers and formatted task data\r\n      setGanttData([ganttColumns, ...formattedData]);\r\n      console.log(\"Gantt Data Prepared:\", [ganttColumns, ...formattedData]);\r\n\r\n    } catch (e) {\r\n      console.error(\"Fetch Gantt tasks error:\", e);\r\n      setError(e.message || 'Failed to load task data for Gantt chart.');\r\n      setGanttData([ganttColumns]); // Reset to just columns on error\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [projectId, token]);\r\n\r\n  useEffect(() => {\r\n    fetchProjectTasks();\r\n  }, [fetchProjectTasks]); // Re-run when projectId changes\r\n\r\n\r\n  // --- Gantt Chart Options ---\r\n  const ganttOptions = {\r\n      // Calculate height dynamically, ensure minimum height if no tasks\r\n      height: ganttData.length > 1 ? ganttData.length * 40 + 50 : 200,\r\n      gantt: {\r\n          trackHeight: 35, // Height of each task row\r\n          barCornerRadius: 2, // Slightly rounded bars\r\n          // --- Custom Palette for Dark Theme ---\r\n          palette: [\r\n              // Define color sets. Google Charts cycles through these for different 'Resources'.\r\n              // Order might matter more than explicit mapping by name.\r\n              // Adjust these hex codes to match your theme.\r\n              { // Corresponds potentially to 'pending' or first status encountered\r\n                  \"color\": \"#6c757d\", // Bootstrap secondary grey\r\n                  \"dark\": \"#5a6268\",\r\n                  \"light\": \"#adb5bd\"\r\n              },\r\n              { // Corresponds potentially to 'in progress' or second status encountered\r\n                  \"color\": \"#0dcaf0\", // Bootstrap info teal\r\n                  \"dark\": \"#0baccc\",\r\n                  \"light\": \"#3ee6ff\"\r\n              },\r\n              { // Corresponds potentially to 'completed' or third status encountered\r\n                  \"color\": \"#198754\", // Bootstrap success green\r\n                  \"dark\": \"#146c43\",\r\n                  \"light\": \"#1f9d67\"\r\n              },\r\n               { // Example extra color if needed\r\n                  \"color\": \"#ffc107\", // Bootstrap warning yellow\r\n                  \"dark\": \"#d39e00\",\r\n                  \"light\": \"#ffca2c\"\r\n              }\r\n          ],\r\n          // --- End Custom Palette ---\r\n          criticalPathEnabled: false, // Typically false for project tasks unless dependencies are set\r\n          percentEnabled: true,       // Show completion percentage overlay\r\n          percentDone: '.',           // Character used for the completed part of the bar\r\n          labelStyle: {               // Style for task names on the left\r\n            fontName: 'Segoe UI, Tahoma, Geneva, Verdana, sans-serif', // Example font\r\n            fontSize: 12,\r\n            color: '#e9ecef',         // Light gray text for dark background\r\n          },\r\n          innerGridTrack: { fill: '#343a40' },    // Darker track background (Bootstrap dark gray)\r\n          innerGridDarkTrack: { fill: '#212529' },// Even darker alternating track (Bootstrap darker gray)\r\n          labelMaxWidth: 180,         // Limit width of task labels\r\n          backgroundColor: {            // Chart area background\r\n              fill: '#212529',         // Match dark theme background\r\n              // stroke: '#495057',    // Optional border color\r\n              // strokeWidth: 1\r\n          },\r\n           // Style the vertical grid lines\r\n           gridlineColor: '#495057',    // Dark gray grid lines\r\n\r\n           // Style the task bars text (percentage)\r\n           barTextStyle: { color: '#ffffff', fontSize: 10 }, // White text on bars\r\n           barHeight: 20, // Thinner bars\r\n\r\n            // Default bar color if palette doesn't match (less useful with palette)\r\n           // defaultBarColor: '#888888'\r\n      },\r\n       tooltip: { isHtml: true }, // Allow richer tooltips if needed later\r\n  };\r\n  // --- END Options ---\r\n\r\n\r\n  // --- Render Logic ---\r\n  if (loading) return <div className=\"text-center text-light py-3\"><Spinner animation=\"border\" size=\"sm\" /> Loading Gantt Chart...</div>;\r\n  if (error) return <Alert variant=\"warning\" className=\"bg-dark text-warning border-warning\">{error}</Alert>;\r\n  // Check if there's actual task data, not just the header row\r\n  if (ganttData.length <= 1) return <Alert variant=\"info\" className=\"bg-dark text-info border-info\">No task data available for Gantt Chart display.</Alert>;\r\n\r\n  return (\r\n    // Use a container - background set internally by chart options now\r\n    <div className=\"gantt-chart-container\" style={{border: '1px solid #495057', borderRadius: '0.375rem'}}> {/* Added border */}\r\n      <Chart\r\n        chartType=\"Gantt\"\r\n        width=\"100%\"\r\n        // Height is now controlled by options based on data length\r\n        height={ganttOptions.height} // Pass calculated height\r\n        data={ganttData}\r\n        options={ganttOptions}\r\n        loader={<div className=\"text-center\">Loading Chart...</div>}\r\n        // Optional: Define specific chart packages if needed (usually automatic)\r\n        // chartPackages={['gantt']}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectGanttChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}