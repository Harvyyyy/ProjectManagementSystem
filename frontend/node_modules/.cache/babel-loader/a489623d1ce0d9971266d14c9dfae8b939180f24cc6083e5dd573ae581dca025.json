{"ast":null,"code":"var _jsxFileName = \"D:\\\\Harvy\\\\Dev\\\\ProjectManagementSystem\\\\frontend\\\\src\\\\components\\\\Notifications\\\\NotificationBell.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Dropdown, Badge, Spinner, ListGroup, Button, Alert } from 'react-bootstrap';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext'; // Adjust path if needed\nimport { API_BASE_URL } from '../../App'; // Adjust path if needed\nimport { formatDate } from '../../utils/formatting'; // Adjust path if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NotificationBell() {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const navigate = useNavigate();\n  const [notifications, setNotifications] = useState([]); // Stores the list of notifications (from pagination data)\n  const [unreadCount, setUnreadCount] = useState(0); // Stores the count of unread notifications\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isOpen, setIsOpen] = useState(false); // Manages dropdown visibility\n\n  // Fetch notifications from the API\n  const fetchNotifications = useCallback(async () => {\n    // Don't fetch if already loading or if the token isn't available\n    if (isLoading || !token) return;\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Fetch the primary notifications endpoint (returns paginated results)\n      const response = await fetch(`${API_BASE_URL}/notifications`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json'\n        }\n      });\n      if (!response.ok) {\n        let errorMsg = `HTTP error ${response.status}`;\n        try {\n          const errData = await response.json();\n          errorMsg = errData.message || errorMsg;\n        } catch (parseError) {\n          console.warn(\"Could not parse error response as JSON\");\n        }\n        throw new Error(errorMsg);\n      }\n      const data = await response.json(); // Expecting Laravel pagination structure { data: [...], links: ..., meta: ... }\n      console.log(\"Notifications Data Received:\", data); // DEBUG: Check structure\n\n      const fetchedNotifications = data.data || [];\n      setNotifications(fetchedNotifications);\n\n      // Calculate unread count from the fetched data\n      const currentUnreadCount = fetchedNotifications.filter(n => !n.read_at).length;\n      setUnreadCount(currentUnreadCount);\n    } catch (err) {\n      console.error(\"Failed to fetch notifications:\", err);\n      setError(\"Couldn't load notifications.\");\n      setUnreadCount(0); // Reset count on error\n      setNotifications([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [token, isLoading]); // Include isLoading in dependencies to prevent concurrent fetches\n\n  // Initial fetch on component mount\n  useEffect(() => {\n    fetchNotifications();\n    // Note: No polling interval implemented here, but could be added.\n    // Consider WebSockets/Laravel Echo for real-time updates instead of polling.\n  }, [fetchNotifications]); // Dependency array includes the memoized fetch function\n\n  // Handle dropdown opening/closing\n  const handleToggle = nextShowState => {\n    setIsOpen(nextShowState);\n    // Optionally re-fetch when opened if data might be stale,\n    // but initial fetch on mount might be sufficient.\n    // if (nextShowState) {\n    //    fetchNotifications();\n    // }\n  };\n\n  // Mark a single notification as read\n  const handleMarkAsRead = async (notificationId, e) => {\n    e.stopPropagation(); // Prevent the dropdown item click handler\n    const targetNotification = notifications.find(n => n.id === notificationId);\n\n    // Do nothing if notification not found or already read\n    if (!targetNotification || targetNotification.read_at) return;\n\n    // 1. Optimistic UI Update\n    setNotifications(prev => prev.map(n => n.id === notificationId ? {\n      ...n,\n      read_at: new Date().toISOString()\n    } : n));\n    // Decrement unread count optimistically\n    setUnreadCount(prev => Math.max(0, prev - 1));\n\n    // 2. API Call\n    try {\n      const response = await fetch(`${API_BASE_URL}/notifications/${notificationId}/read`, {\n        method: 'PATCH',\n        // <-- CORRECT METHOD\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json'\n          // 'Content-Type' not needed for PATCH with no body\n        }\n      });\n\n      // Check if the API call failed\n      if (!response.ok) {\n        // If failed, response status should be 204 No Content on success\n        throw new Error(`Server failed to mark as read: ${response.status}`);\n      }\n      // Success: No action needed as optimistic update handled the UI change\n    } catch (err) {\n      console.error(\"Failed to mark notification as read:\", err);\n      setError(\"Failed to update notification status.\"); // Show error feedback\n\n      // 3. Revert Optimistic UI on Error\n      setNotifications(prev => prev.map(n => n.id === notificationId ? {\n        ...n,\n        read_at: null\n      } : n // Revert read_at status\n      ));\n      // Increment unread count back\n      setUnreadCount(prev => prev + 1);\n    }\n  };\n\n  // Handle clicking on the notification item itself\n  const handleNotificationClick = (notification, e) => {\n    var _notification$data;\n    // Mark as read if it's unread\n    if (!notification.read_at) {\n      handleMarkAsRead(notification.id, e);\n    }\n    // Navigate if an action URL is provided\n    if ((_notification$data = notification.data) !== null && _notification$data !== void 0 && _notification$data.action_url) {\n      // <-- Use action_url\n      navigate(notification.data.action_url);\n      setIsOpen(false); // Close dropdown after navigation\n    }\n  };\n\n  // --- Mark All As Read Function ---\n  const handleMarkAllAsRead = async e => {\n    e.stopPropagation(); // Prevent dropdown from closing if needed\n    if (unreadCount === 0) return; // Nothing to mark\n\n    // Store current state for potential revert\n    const previousNotifications = [...notifications];\n    const previousUnreadCount = unreadCount;\n\n    // 1. Optimistic UI Update\n    setNotifications(prev => prev.map(n => !n.read_at ? {\n      ...n,\n      read_at: new Date().toISOString()\n    } : n));\n    setUnreadCount(0);\n\n    // 2. API Call\n    try {\n      const response = await fetch(`${API_BASE_URL}/notifications/mark-all-read`, {\n        method: 'POST',\n        // POST is okay here as defined in routes/api.php\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json'\n        }\n      });\n      if (!response.ok) {\n        // Expect 204 No Content on success\n        throw new Error(`Server failed to mark all as read: ${response.status}`);\n      }\n      // Success: Optimistic update handled UI\n    } catch (err) {\n      console.error(\"Failed to mark all notifications as read:\", err);\n      setError(\"Failed to update all notifications.\");\n\n      // 3. Revert Optimistic UI on Error\n      setNotifications(previousNotifications);\n      setUnreadCount(previousUnreadCount);\n    }\n  };\n\n  // Custom Dropdown Toggle Component (Bell Icon + Badge)\n  const CustomToggle = /*#__PURE__*/React.forwardRef(({\n    children,\n    onClick\n  }, ref) => /*#__PURE__*/_jsxDEV(Button, {\n    ref: ref,\n    onClick: e => {\n      e.preventDefault();\n      onClick(e);\n    },\n    variant: \"link\" // Use link variant for less button-like appearance if desired\n    ,\n    className: \"position-relative text-decoration-none border-0 p-0 me-2\",\n    \"aria-label\": \"Notifications\",\n    title: `${unreadCount} unread notifications`,\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"bi bi-bell-fill text-white fs-5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), \" \", unreadCount > 0 && /*#__PURE__*/_jsxDEV(Badge, {\n      pill: true,\n      bg: \"danger\",\n      className: \"position-absolute top-0 start-100 translate-middle\",\n      style: {\n        fontSize: '0.6em',\n        padding: '0.3em 0.5em'\n      },\n      children: [unreadCount > 9 ? '9+' : unreadCount, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"visually-hidden\",\n        children: \"unread notifications\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this));\n\n  // Main Render\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    onToggle: handleToggle,\n    show: isOpen,\n    align: \"end\",\n    children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n      as: CustomToggle,\n      id: \"dropdown-notification-bell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n      variant: \"dark\",\n      className: \"shadow mt-2 dropdown-menu-scrollable\",\n      style: {\n        minWidth: '350px',\n        maxWidth: '400px',\n        maxHeight: '450px',\n        overflowY: 'auto'\n      } // Adjusted sizing\n      ,\n      children: [/*#__PURE__*/_jsxDEV(Dropdown.Header, {\n        className: \"d-flex justify-content-between align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Notifications\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 14\n        }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline-light\",\n          size: \"sm\",\n          onClick: handleMarkAllAsRead,\n          title: \"Mark all as read\",\n          children: \"Mark All Read\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown.Divider, {\n        className: \"mt-1 mb-0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 10\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center p-3 text-muted\",\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\",\n          size: \"sm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 68\n        }, this), \" Loading...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 24\n      }, this), error && !isLoading && /*#__PURE__*/_jsxDEV(Dropdown.ItemText, {\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          className: \"mb-0 mx-2\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 53\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 34\n      }, this), !isLoading && !error && notifications.length === 0 && /*#__PURE__*/_jsxDEV(Dropdown.ItemText, {\n        className: \"text-muted text-center p-3\",\n        children: \"You have no notifications.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }, this), !isLoading && !error && notifications.length > 0 && /*#__PURE__*/_jsxDEV(ListGroup, {\n        variant: \"flush\",\n        children: notifications.map(notification => {\n          var _notification$data2;\n          return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            action: true // Makes it behave like a link/button\n            ,\n            onClick: e => handleNotificationClick(notification, e)\n            // Use data attributes for easier styling if needed\n            ,\n            \"data-read\": !!notification.read_at,\n            className: `bg-dark text-light border-secondary px-3 py-2 d-flex flex-column ${!notification.read_at ? 'notification-unread fw-bold' : 'notification-read text-muted'}`,\n            style: {\n              cursor: 'pointer',\n              opacity: !notification.read_at ? 1 : 0.8\n            } // Style unread/read\n            ,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex justify-content-between align-items-start mb-1\",\n              children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                style: {\n                  fontSize: '0.9em',\n                  marginRight: '10px',\n                  flexGrow: 1\n                },\n                children: ((_notification$data2 = notification.data) === null || _notification$data2 === void 0 ? void 0 : _notification$data2.message) || 'Notification message missing.'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 28\n              }, this), !notification.read_at && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-secondary\",\n                size: \"sm\",\n                className: \"ms-auto border-0 flex-shrink-0 p-0\" // Adjusted padding\n                ,\n                style: {\n                  lineHeight: '1'\n                },\n                onClick: e => handleMarkAsRead(notification.id, e),\n                title: \"Mark as read\",\n                \"aria-label\": \"Mark notification as read\",\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"bi bi-check-circle\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 37\n                }, this), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 24\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"d-block text-info\",\n              style: {\n                fontSize: '0.75em'\n              },\n              children: [\" \", formatDate(notification.created_at, {\n                dateStyle: 'short',\n                timeStyle: 'short'\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 24\n            }, this)]\n          }, notification.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n_s(NotificationBell, \"QgVOi2Dd6d6fVwwELrP7FoUANlU=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = NotificationBell;\nexport default NotificationBell;\nvar _c;\n$RefreshReg$(_c, \"NotificationBell\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Dropdown","Badge","Spinner","ListGroup","Button","Alert","useNavigate","useAuth","API_BASE_URL","formatDate","jsxDEV","_jsxDEV","NotificationBell","_s","token","navigate","notifications","setNotifications","unreadCount","setUnreadCount","isLoading","setIsLoading","error","setError","isOpen","setIsOpen","fetchNotifications","response","fetch","headers","Authorization","Accept","ok","errorMsg","status","errData","json","message","parseError","console","warn","Error","data","log","fetchedNotifications","currentUnreadCount","filter","n","read_at","length","err","handleToggle","nextShowState","handleMarkAsRead","notificationId","e","stopPropagation","targetNotification","find","id","prev","map","Date","toISOString","Math","max","method","handleNotificationClick","notification","_notification$data","action_url","handleMarkAllAsRead","previousNotifications","previousUnreadCount","CustomToggle","forwardRef","children","onClick","ref","preventDefault","variant","className","title","fileName","_jsxFileName","lineNumber","columnNumber","pill","bg","style","fontSize","padding","onToggle","show","align","Toggle","as","Menu","minWidth","maxWidth","maxHeight","overflowY","Header","size","Divider","animation","ItemText","_notification$data2","Item","action","cursor","opacity","marginRight","flexGrow","lineHeight","created_at","dateStyle","timeStyle","_c","$RefreshReg$"],"sources":["D:/Harvy/Dev/ProjectManagementSystem/frontend/src/components/Notifications/NotificationBell.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Dropdown, Badge, Spinner, ListGroup, Button, Alert } from 'react-bootstrap';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthContext'; // Adjust path if needed\r\nimport { API_BASE_URL } from '../../App'; // Adjust path if needed\r\nimport { formatDate } from '../../utils/formatting'; // Adjust path if needed\r\n\r\nfunction NotificationBell() {\r\n  const { token } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [notifications, setNotifications] = useState([]); // Stores the list of notifications (from pagination data)\r\n  const [unreadCount, setUnreadCount] = useState(0);    // Stores the count of unread notifications\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [isOpen, setIsOpen] = useState(false);        // Manages dropdown visibility\r\n\r\n  // Fetch notifications from the API\r\n  const fetchNotifications = useCallback(async () => {\r\n    // Don't fetch if already loading or if the token isn't available\r\n    if (isLoading || !token) return;\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      // Fetch the primary notifications endpoint (returns paginated results)\r\n      const response = await fetch(`${API_BASE_URL}/notifications`, {\r\n        headers: {\r\n           Authorization: `Bearer ${token}`,\r\n           Accept: 'application/json'\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        let errorMsg = `HTTP error ${response.status}`;\r\n         try {\r\n            const errData = await response.json();\r\n            errorMsg = errData.message || errorMsg;\r\n         } catch (parseError) {\r\n            console.warn(\"Could not parse error response as JSON\");\r\n         }\r\n        throw new Error(errorMsg);\r\n      }\r\n\r\n      const data = await response.json(); // Expecting Laravel pagination structure { data: [...], links: ..., meta: ... }\r\n      console.log(\"Notifications Data Received:\", data); // DEBUG: Check structure\r\n\r\n      const fetchedNotifications = data.data || [];\r\n      setNotifications(fetchedNotifications);\r\n\r\n      // Calculate unread count from the fetched data\r\n      const currentUnreadCount = fetchedNotifications.filter(n => !n.read_at).length;\r\n      setUnreadCount(currentUnreadCount);\r\n\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch notifications:\", err);\r\n      setError(\"Couldn't load notifications.\");\r\n      setUnreadCount(0); // Reset count on error\r\n      setNotifications([]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [token, isLoading]); // Include isLoading in dependencies to prevent concurrent fetches\r\n\r\n  // Initial fetch on component mount\r\n  useEffect(() => {\r\n    fetchNotifications();\r\n    // Note: No polling interval implemented here, but could be added.\r\n    // Consider WebSockets/Laravel Echo for real-time updates instead of polling.\r\n  }, [fetchNotifications]); // Dependency array includes the memoized fetch function\r\n\r\n  // Handle dropdown opening/closing\r\n  const handleToggle = (nextShowState) => {\r\n     setIsOpen(nextShowState);\r\n     // Optionally re-fetch when opened if data might be stale,\r\n     // but initial fetch on mount might be sufficient.\r\n     // if (nextShowState) {\r\n     //    fetchNotifications();\r\n     // }\r\n  };\r\n\r\n  // Mark a single notification as read\r\n  const handleMarkAsRead = async (notificationId, e) => {\r\n      e.stopPropagation(); // Prevent the dropdown item click handler\r\n      const targetNotification = notifications.find(n => n.id === notificationId);\r\n\r\n      // Do nothing if notification not found or already read\r\n      if (!targetNotification || targetNotification.read_at) return;\r\n\r\n      // 1. Optimistic UI Update\r\n      setNotifications(prev => prev.map(n =>\r\n          n.id === notificationId ? { ...n, read_at: new Date().toISOString() } : n\r\n      ));\r\n      // Decrement unread count optimistically\r\n      setUnreadCount(prev => Math.max(0, prev - 1));\r\n\r\n      // 2. API Call\r\n      try {\r\n          const response = await fetch(`${API_BASE_URL}/notifications/${notificationId}/read`, {\r\n              method: 'PATCH', // <-- CORRECT METHOD\r\n              headers: {\r\n                 Authorization: `Bearer ${token}`,\r\n                 Accept: 'application/json',\r\n                 // 'Content-Type' not needed for PATCH with no body\r\n              },\r\n          });\r\n\r\n          // Check if the API call failed\r\n          if (!response.ok) {\r\n             // If failed, response status should be 204 No Content on success\r\n             throw new Error(`Server failed to mark as read: ${response.status}`);\r\n          }\r\n          // Success: No action needed as optimistic update handled the UI change\r\n\r\n      } catch (err) {\r\n          console.error(\"Failed to mark notification as read:\", err);\r\n          setError(\"Failed to update notification status.\"); // Show error feedback\r\n\r\n          // 3. Revert Optimistic UI on Error\r\n          setNotifications(prev => prev.map(n =>\r\n              n.id === notificationId ? { ...n, read_at: null } : n // Revert read_at status\r\n          ));\r\n           // Increment unread count back\r\n          setUnreadCount(prev => prev + 1);\r\n      }\r\n  };\r\n\r\n  // Handle clicking on the notification item itself\r\n  const handleNotificationClick = (notification, e) => {\r\n    // Mark as read if it's unread\r\n    if (!notification.read_at) {\r\n        handleMarkAsRead(notification.id, e);\r\n    }\r\n    // Navigate if an action URL is provided\r\n    if (notification.data?.action_url) { // <-- Use action_url\r\n        navigate(notification.data.action_url);\r\n        setIsOpen(false); // Close dropdown after navigation\r\n    }\r\n  };\r\n\r\n   // --- Mark All As Read Function ---\r\n   const handleMarkAllAsRead = async (e) => {\r\n    e.stopPropagation(); // Prevent dropdown from closing if needed\r\n    if (unreadCount === 0) return; // Nothing to mark\r\n\r\n    // Store current state for potential revert\r\n    const previousNotifications = [...notifications];\r\n    const previousUnreadCount = unreadCount;\r\n\r\n    // 1. Optimistic UI Update\r\n    setNotifications(prev => prev.map(n =>\r\n        !n.read_at ? { ...n, read_at: new Date().toISOString() } : n\r\n    ));\r\n    setUnreadCount(0);\r\n\r\n    // 2. API Call\r\n    try {\r\n        const response = await fetch(`${API_BASE_URL}/notifications/mark-all-read`, {\r\n            method: 'POST', // POST is okay here as defined in routes/api.php\r\n            headers: { Authorization: `Bearer ${token}`, Accept: 'application/json' },\r\n        });\r\n\r\n        if (!response.ok) { // Expect 204 No Content on success\r\n            throw new Error(`Server failed to mark all as read: ${response.status}`);\r\n        }\r\n        // Success: Optimistic update handled UI\r\n    } catch (err) {\r\n        console.error(\"Failed to mark all notifications as read:\", err);\r\n        setError(\"Failed to update all notifications.\");\r\n\r\n        // 3. Revert Optimistic UI on Error\r\n        setNotifications(previousNotifications);\r\n        setUnreadCount(previousUnreadCount);\r\n    }\r\n};\r\n\r\n\r\n  // Custom Dropdown Toggle Component (Bell Icon + Badge)\r\n  const CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\r\n    <Button\r\n      ref={ref}\r\n      onClick={(e) => { e.preventDefault(); onClick(e); }}\r\n      variant=\"link\" // Use link variant for less button-like appearance if desired\r\n      className=\"position-relative text-decoration-none border-0 p-0 me-2\"\r\n      aria-label=\"Notifications\"\r\n      title={`${unreadCount} unread notifications`}\r\n    >\r\n      <i className=\"bi bi-bell-fill text-white fs-5\"></i> {/* Ensure bootstrap-icons are included */}\r\n      {unreadCount > 0 && (\r\n        <Badge\r\n          pill\r\n          bg=\"danger\"\r\n          className=\"position-absolute top-0 start-100 translate-middle\"\r\n          style={{ fontSize: '0.6em', padding: '0.3em 0.5em' }}\r\n        >\r\n           {unreadCount > 9 ? '9+' : unreadCount} {/* Show 9+ if count is high */}\r\n          <span className=\"visually-hidden\">unread notifications</span>\r\n        </Badge>\r\n      )}\r\n    </Button>\r\n  ));\r\n\r\n  // Main Render\r\n  return (\r\n    <Dropdown onToggle={handleToggle} show={isOpen} align=\"end\">\r\n      <Dropdown.Toggle as={CustomToggle} id=\"dropdown-notification-bell\" />\r\n\r\n      <Dropdown.Menu\r\n         variant=\"dark\"\r\n         className=\"shadow mt-2 dropdown-menu-scrollable\"\r\n         style={{minWidth: '350px', maxWidth:'400px', maxHeight: '450px', overflowY: 'auto'}} // Adjusted sizing\r\n        >\r\n         <Dropdown.Header className=\"d-flex justify-content-between align-items-center\">\r\n             <span>Notifications</span>\r\n              {/* Add Mark All Read Button if there are unread notifications */}\r\n              {unreadCount > 0 && (\r\n                 <Button\r\n                     variant=\"outline-light\"\r\n                     size=\"sm\"\r\n                     onClick={handleMarkAllAsRead}\r\n                     title=\"Mark all as read\"\r\n                 >\r\n                     Mark All Read\r\n                 </Button>\r\n             )}\r\n         </Dropdown.Header>\r\n         <Dropdown.Divider className=\"mt-1 mb-0\"/>\r\n\r\n         {/* Loading State */}\r\n         {isLoading && <div className=\"text-center p-3 text-muted\"><Spinner animation=\"border\" size=\"sm\" /> Loading...</div>}\r\n\r\n         {/* Error State */}\r\n         {error && !isLoading && <Dropdown.ItemText><Alert variant=\"danger\" className=\"mb-0 mx-2\">{error}</Alert></Dropdown.ItemText>}\r\n\r\n         {/* Empty State */}\r\n         {!isLoading && !error && notifications.length === 0 && (\r\n            <Dropdown.ItemText className=\"text-muted text-center p-3\">You have no notifications.</Dropdown.ItemText>\r\n         )}\r\n\r\n         {/* Notifications List */}\r\n         {!isLoading && !error && notifications.length > 0 && (\r\n             <ListGroup variant=\"flush\">\r\n                 {notifications.map(notification => (\r\n                     <ListGroup.Item\r\n                        key={notification.id}\r\n                        action // Makes it behave like a link/button\r\n                        onClick={(e) => handleNotificationClick(notification, e)}\r\n                        // Use data attributes for easier styling if needed\r\n                        data-read={!!notification.read_at}\r\n                        className={`bg-dark text-light border-secondary px-3 py-2 d-flex flex-column ${!notification.read_at ? 'notification-unread fw-bold' : 'notification-read text-muted'}`}\r\n                        style={{ cursor: 'pointer', opacity: !notification.read_at ? 1 : 0.8 }} // Style unread/read\r\n                      >\r\n                       {/* Message and Mark Read Button */}\r\n                       <div className=\"d-flex justify-content-between align-items-start mb-1\">\r\n                           <small style={{fontSize: '0.9em', marginRight: '10px', flexGrow: 1}}>\r\n                                {/* Safely access nested data property */}\r\n                                {notification.data?.message || 'Notification message missing.'}\r\n                           </small>\r\n                            {/* Show mark read button only if unread */}\r\n                            {!notification.read_at && (\r\n                                <Button\r\n                                    variant=\"outline-secondary\"\r\n                                    size=\"sm\"\r\n                                    className=\"ms-auto border-0 flex-shrink-0 p-0\" // Adjusted padding\r\n                                    style={{ lineHeight: '1' }}\r\n                                    onClick={(e) => handleMarkAsRead(notification.id, e)}\r\n                                    title=\"Mark as read\"\r\n                                    aria-label=\"Mark notification as read\"\r\n                                >\r\n                                    <i className=\"bi bi-check-circle\"></i> {/* Check icon */}\r\n                                </Button>\r\n                            )}\r\n                       </div>\r\n                       {/* Timestamp */}\r\n                       <small className=\"d-block text-info\" style={{fontSize: '0.75em'}}> {/* Use text-info or similar for timestamp */}\r\n                           {formatDate(notification.created_at, { dateStyle: 'short', timeStyle: 'short' })}\r\n                       </small>\r\n                     </ListGroup.Item>\r\n                 ))}\r\n             </ListGroup>\r\n         )}\r\n\r\n         {/* Optional: Link to a dedicated \"All Notifications\" page */}\r\n         {/* You might need pagination info from the API to decide if 'View All' is needed */}\r\n         {/* <Dropdown.Divider /> */}\r\n         {/* <Dropdown.Item href=\"/notifications\" className=\"text-center text-primary\">View All Notifications</Dropdown.Item> */}\r\n\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nexport default NotificationBell;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}