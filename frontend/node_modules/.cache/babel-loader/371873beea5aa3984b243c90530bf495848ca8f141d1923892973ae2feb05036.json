{"ast":null,"code":"var _jsxFileName = \"D:\\\\Harvy\\\\Dev\\\\ProjectManagementSystem\\\\frontend\\\\src\\\\components\\\\Dashboard\\\\TasksTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { API_BASE_URL } from '../../App';\nimport { Modal, Button, Form, Badge, Table, Spinner, Alert, Row, Col } from 'react-bootstrap';\nimport { formatDuration, formatDate } from '../../utils/formatting';\n// import TimeLogForm from './TimeLogForm'; // Removed if not using Time Log Form\n\n// Helper functions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getTaskStatusColor = status => {/* ... */};\nconst getTaskPriorityColor = priority => {/* ... */};\nfunction TaskTable() {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const [tasks, setTasks] = useState([]);\n  const [projects, setProjects] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [modalError, setModalError] = useState(null);\n\n  // State for Edit/Create Task Modal\n  const [showModal, setShowModal] = useState(false);\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [formData, setFormData] = useState({\n    project_id: '',\n    title: '',\n    description: '',\n    status: 'pending',\n    priority: 'medium',\n    assigned_user_id: '',\n    due_date: ''\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // State for Start/Stop Button Loading\n  const [timerLoadingTaskId, setTimerLoadingTaskId] = useState(null);\n\n  // REMOVED Time Log Modal State\n\n  const taskStatuses = ['pending', 'in progress', 'completed'];\n  const taskPriorities = ['low', 'medium', 'high'];\n\n  // --- Data Fetching with Robust Parsing ---\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    console.log(\"fetchData START\"); // DEBUG\n    try {\n      var _tasksData$data, _tasksData, _projectsData$data, _projectsData, _usersData$data, _usersData;\n      console.log(\"fetchData: Starting Promise.all\"); // DEBUG\n      const [tasksResponse, projectsResponse, usersResponse] = await Promise.all([fetch(`${API_BASE_URL}/tasks`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json'\n        }\n      }), fetch(`${API_BASE_URL}/projects`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json'\n        }\n      }), fetch(`${API_BASE_URL}/users`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json'\n        }\n      })]);\n      console.log(\"fetchData: Promise.all RESOLVED\"); // DEBUG\n\n      // Check initial response statuses first\n      if (!tasksResponse.ok) throw new Error(`Task fetch failed: ${tasksResponse.status} ${tasksResponse.statusText}`);\n      if (!projectsResponse.ok) throw new Error(`Project fetch failed: ${projectsResponse.status} ${projectsResponse.statusText}`);\n      if (!usersResponse.ok) throw new Error(`User fetch failed: ${usersResponse.status} ${usersResponse.statusText}`);\n      console.log(\"fetchData: Reading response bodies as text\"); // DEBUG\n      // Read bodies as text first\n      const tasksText = await tasksResponse.text();\n      const projectsText = await projectsResponse.text();\n      const usersText = await usersResponse.text();\n      console.log(\"fetchData: Parsing JSON safely\"); // DEBUG\n      // Safely parse JSON, providing defaults for invalid/empty responses\n      let tasksData = [];\n      try {\n        if (tasksText && tasksText.trim().startsWith('[')) {\n          // Basic check for array JSON\n          tasksData = JSON.parse(tasksText);\n        } else {\n          console.warn(\"Received non-array or empty response for tasks:\", tasksText);\n        }\n      } catch (e) {\n        console.error(\"Error parsing tasks JSON:\", e, tasksText);\n      }\n      let projectsData = {\n        data: []\n      }; // Default for paginated structure\n      try {\n        if (projectsText && projectsText.trim().startsWith('{')) {\n          // Basic check for object JSON\n          const parsedProjects = JSON.parse(projectsText);\n          // Check if it looks like pagination or a direct array (less likely for projects)\n          if (parsedProjects.data && Array.isArray(parsedProjects.data)) {\n            projectsData = parsedProjects;\n          } else if (Array.isArray(parsedProjects)) {\n            // Handle case where backend might sometimes return just an array\n            projectsData = {\n              data: parsedProjects\n            }; // Wrap it for consistency if needed\n          } else {\n            console.warn(\"Received unexpected object structure for projects:\", projectsText);\n          }\n        } else if (projectsText && projectsText.trim().startsWith('[')) {\n          // Handle direct array case\n          projectsData = {\n            data: JSON.parse(projectsText)\n          };\n        } else {\n          console.warn(\"Received non-object or empty response for projects:\", projectsText);\n        }\n      } catch (e) {\n        console.error(\"Error parsing projects JSON:\", e, projectsText);\n      }\n      let usersData = [];\n      try {\n        if (usersText && usersText.trim().startsWith('[')) {\n          // Basic check for array JSON\n          usersData = JSON.parse(usersText);\n        } else if (usersText && usersText.trim().startsWith('{') && JSON.parse(usersText).data) {\n          // Handle potential paginated users\n          usersData = JSON.parse(usersText).data;\n        } else {\n          console.warn(\"Received non-array or empty response for users:\", usersText);\n        }\n      } catch (e) {\n        console.error(\"Error parsing users JSON:\", e, usersText);\n      }\n      console.log(\"fetchData: Setting State\"); // DEBUG\n      // Set state with parsed data or defaults\n      setTasks(Array.isArray(tasksData) ? tasksData : (_tasksData$data = (_tasksData = tasksData) === null || _tasksData === void 0 ? void 0 : _tasksData.data) !== null && _tasksData$data !== void 0 ? _tasksData$data : []); // Handle both direct array and paginated tasks just in case\n      setProjects((_projectsData$data = (_projectsData = projectsData) === null || _projectsData === void 0 ? void 0 : _projectsData.data) !== null && _projectsData$data !== void 0 ? _projectsData$data : []); // Use the data array from parsed/default object\n      setUsers(Array.isArray(usersData) ? usersData : (_usersData$data = (_usersData = usersData) === null || _usersData === void 0 ? void 0 : _usersData.data) !== null && _usersData$data !== void 0 ? _usersData$data : []); // Handle both direct array and paginated users just in case\n      console.log(\"fetchData: State Set\"); // DEBUG\n    } catch (e) {\n      console.error('fetchData ERROR:', e);\n      setError(`Failed to load data: ${e.message}. Check API responses.`); // Update error message\n      setTasks([]);\n      setProjects([]);\n      setUsers([]); // Clear data on error\n    } finally {\n      console.log(\"fetchData FINALLY - setLoading(false)\"); // DEBUG\n      setLoading(false);\n    }\n  }, [token]);\n  // --- End Data Fetching ---\n\n  useEffect(() => {\n    console.log(\"useEffect running - calling fetchData\"); // DEBUG\n    fetchData();\n  }, [fetchData]);\n\n  // --- Modal Handlers ---\n  const handleShowCreateModal = () => {/* ... (remains same) ... */};\n  const handleShowEditModal = task => {/* ... (remains same) ... */};\n  const handleCloseModal = () => {/* ... (remains same) ... */};\n  const handleInputChange = e => {/* ... (remains same) ... */};\n\n  // --- Form Submission ---\n  const handleSubmit = async e => {/* ... (catch block uses e.message) ... */};\n\n  // --- Deletion Handler ---\n  const handleDelete = async taskId => {/* ... (catch block uses e.message) ... */};\n\n  // --- Start/Stop Timer Handler ---\n  const handleTimerAction = async (taskId, action) => {/* ... (catch block uses e.message) ... */};\n\n  // --- Render Logic ---\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"d-flex justify-content-center align-items-center text-light vh-100\",\n    children: [/*#__PURE__*/_jsxDEV(Spinner, {\n      animation: \"border\",\n      className: \"me-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 109\n    }, this), \" Loading...\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 25\n  }, this);\n  if (error && !showModal) return /*#__PURE__*/_jsxDEV(Alert, {\n    variant: \"danger\",\n    className: \"bg-dark text-light border-danger\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 37\n  }, this); // Hide general error if modal is open\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-md-4\",\n    style: {\n      minHeight: '100vh',\n      background: 'linear-gradient(135deg, #232323, #1a1a1a)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-dark p-4 rounded shadow mb-4\",\n      children: [tasks.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"table-responsive\",\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          variant: \"dark\",\n          striped: true,\n          hover: true,\n          responsive: \"sm\",\n          className: \"align-middle\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Project\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 49\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Priority\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 64\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Due Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 81\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Assignee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 98\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-end\",\n                children: \"Started\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-end\",\n                children: \"Ended\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-end\",\n                children: \"Duration\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                className: \"text-center\",\n                children: \"Actions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: tasks.map(task => {\n              const isTimerRunning = task.started_at && !task.ended_at;\n              const canStart = !task.started_at;\n              const canStop = isTimerRunning;\n              const isLoading = timerLoadingTaskId === task.id;\n              return /*#__PURE__*/_jsxDEV(\"tr\", {}, task.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 29\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this), !loading && tasks.length === 0 && projects.length > 0 && /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"info\",\n        className: \"bg-dark text-info border-info mt-3\",\n        children: \"No tasks found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 67\n      }, this), !loading && projects.length === 0 && /*#__PURE__*/_jsxDEV(Alert, {\n        variant: \"warning\",\n        className: \"bg-dark text-warning border-warning\",\n        children: \"Create a project before adding tasks.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 47\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onHide: handleCloseModal,\n      backdrop: \"static\",\n      keyboard: false,\n      centered: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(TaskTable, \"DJsyAvPvVW4DDxIzN+ZkPIdWAtE=\", false, function () {\n  return [useAuth];\n});\n_c = TaskTable;\nexport default TaskTable;\nvar _c;\n$RefreshReg$(_c, \"TaskTable\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useAuth","API_BASE_URL","Modal","Button","Form","Badge","Table","Spinner","Alert","Row","Col","formatDuration","formatDate","jsxDEV","_jsxDEV","getTaskStatusColor","status","getTaskPriorityColor","priority","TaskTable","_s","token","tasks","setTasks","projects","setProjects","users","setUsers","loading","setLoading","error","setError","modalError","setModalError","showModal","setShowModal","isEditing","setIsEditing","currentTask","setCurrentTask","formData","setFormData","project_id","title","description","assigned_user_id","due_date","isSubmitting","setIsSubmitting","timerLoadingTaskId","setTimerLoadingTaskId","taskStatuses","taskPriorities","fetchData","console","log","_tasksData$data","_tasksData","_projectsData$data","_projectsData","_usersData$data","_usersData","tasksResponse","projectsResponse","usersResponse","Promise","all","fetch","headers","ok","Error","statusText","tasksText","text","projectsText","usersText","tasksData","trim","startsWith","JSON","parse","warn","e","projectsData","data","parsedProjects","Array","isArray","usersData","message","handleShowCreateModal","handleShowEditModal","task","handleCloseModal","handleInputChange","handleSubmit","handleDelete","taskId","handleTimerAction","action","className","children","animation","fileName","_jsxFileName","lineNumber","columnNumber","variant","style","minHeight","background","length","striped","hover","responsive","map","isTimerRunning","started_at","ended_at","canStart","canStop","isLoading","id","show","onHide","backdrop","keyboard","centered","_c","$RefreshReg$"],"sources":["D:/Harvy/Dev/ProjectManagementSystem/frontend/src/components/Dashboard/TasksTable.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useAuth } from '../../context/AuthContext';\r\nimport { API_BASE_URL } from '../../App';\r\nimport { Modal, Button, Form, Badge, Table, Spinner, Alert, Row, Col } from 'react-bootstrap';\r\nimport { formatDuration, formatDate } from '../../utils/formatting';\r\n// import TimeLogForm from './TimeLogForm'; // Removed if not using Time Log Form\r\n\r\n// Helper functions\r\nconst getTaskStatusColor = (status) => { /* ... */ };\r\nconst getTaskPriorityColor = (priority) => { /* ... */ };\r\n\r\nfunction TaskTable() {\r\n  const { token } = useAuth();\r\n  const [tasks, setTasks] = useState([]);\r\n  const [projects, setProjects] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [modalError, setModalError] = useState(null);\r\n\r\n  // State for Edit/Create Task Modal\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [currentTask, setCurrentTask] = useState(null);\r\n  const [formData, setFormData] = useState({\r\n    project_id: '', title: '', description: '', status: 'pending', priority: 'medium',\r\n    assigned_user_id: '', due_date: '',\r\n  });\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  // State for Start/Stop Button Loading\r\n  const [timerLoadingTaskId, setTimerLoadingTaskId] = useState(null);\r\n\r\n  // REMOVED Time Log Modal State\r\n\r\n  const taskStatuses = ['pending', 'in progress', 'completed'];\r\n  const taskPriorities = ['low', 'medium', 'high'];\r\n\r\n  // --- Data Fetching with Robust Parsing ---\r\n  const fetchData = useCallback(async () => {\r\n    setLoading(true); setError(null);\r\n    console.log(\"fetchData START\"); // DEBUG\r\n    try {\r\n      console.log(\"fetchData: Starting Promise.all\"); // DEBUG\r\n      const [tasksResponse, projectsResponse, usersResponse] = await Promise.all([\r\n        fetch(`${API_BASE_URL}/tasks`, { headers: { 'Authorization': `Bearer ${token}`, 'Accept': 'application/json' } }),\r\n        fetch(`${API_BASE_URL}/projects`, { headers: { 'Authorization': `Bearer ${token}`, 'Accept': 'application/json' } }),\r\n        fetch(`${API_BASE_URL}/users`, { headers: { 'Authorization': `Bearer ${token}`, 'Accept': 'application/json' } }),\r\n      ]);\r\n      console.log(\"fetchData: Promise.all RESOLVED\"); // DEBUG\r\n\r\n      // Check initial response statuses first\r\n      if (!tasksResponse.ok) throw new Error(`Task fetch failed: ${tasksResponse.status} ${tasksResponse.statusText}`);\r\n      if (!projectsResponse.ok) throw new Error(`Project fetch failed: ${projectsResponse.status} ${projectsResponse.statusText}`);\r\n      if (!usersResponse.ok) throw new Error(`User fetch failed: ${usersResponse.status} ${usersResponse.statusText}`);\r\n\r\n      console.log(\"fetchData: Reading response bodies as text\"); // DEBUG\r\n      // Read bodies as text first\r\n      const tasksText = await tasksResponse.text();\r\n      const projectsText = await projectsResponse.text();\r\n      const usersText = await usersResponse.text();\r\n\r\n      console.log(\"fetchData: Parsing JSON safely\"); // DEBUG\r\n      // Safely parse JSON, providing defaults for invalid/empty responses\r\n      let tasksData = [];\r\n      try {\r\n          if (tasksText && tasksText.trim().startsWith('[')) { // Basic check for array JSON\r\n              tasksData = JSON.parse(tasksText);\r\n          } else {\r\n              console.warn(\"Received non-array or empty response for tasks:\", tasksText);\r\n          }\r\n      } catch (e) { console.error(\"Error parsing tasks JSON:\", e, tasksText); }\r\n\r\n      let projectsData = { data: [] }; // Default for paginated structure\r\n       try {\r\n           if (projectsText && projectsText.trim().startsWith('{')) { // Basic check for object JSON\r\n               const parsedProjects = JSON.parse(projectsText);\r\n               // Check if it looks like pagination or a direct array (less likely for projects)\r\n               if(parsedProjects.data && Array.isArray(parsedProjects.data)) {\r\n                    projectsData = parsedProjects;\r\n               } else if (Array.isArray(parsedProjects)) {\r\n                    // Handle case where backend might sometimes return just an array\r\n                    projectsData = { data: parsedProjects }; // Wrap it for consistency if needed\r\n               } else {\r\n                    console.warn(\"Received unexpected object structure for projects:\", projectsText);\r\n               }\r\n           } else if (projectsText && projectsText.trim().startsWith('[')) { // Handle direct array case\r\n               projectsData = { data: JSON.parse(projectsText) };\r\n           } else {\r\n                console.warn(\"Received non-object or empty response for projects:\", projectsText);\r\n           }\r\n       } catch (e) { console.error(\"Error parsing projects JSON:\", e, projectsText); }\r\n\r\n\r\n      let usersData = [];\r\n      try {\r\n          if (usersText && usersText.trim().startsWith('[')) { // Basic check for array JSON\r\n              usersData = JSON.parse(usersText);\r\n          } else if (usersText && usersText.trim().startsWith('{') && JSON.parse(usersText).data) { // Handle potential paginated users\r\n              usersData = JSON.parse(usersText).data;\r\n          } else {\r\n                console.warn(\"Received non-array or empty response for users:\", usersText);\r\n          }\r\n      } catch (e) { console.error(\"Error parsing users JSON:\", e, usersText); }\r\n\r\n\r\n      console.log(\"fetchData: Setting State\"); // DEBUG\r\n      // Set state with parsed data or defaults\r\n      setTasks(Array.isArray(tasksData) ? tasksData : (tasksData?.data ?? [])); // Handle both direct array and paginated tasks just in case\r\n      setProjects(projectsData?.data ?? []); // Use the data array from parsed/default object\r\n      setUsers(Array.isArray(usersData) ? usersData : (usersData?.data ?? [])); // Handle both direct array and paginated users just in case\r\n      console.log(\"fetchData: State Set\"); // DEBUG\r\n\r\n    } catch (e) {\r\n      console.error('fetchData ERROR:', e);\r\n      setError(`Failed to load data: ${e.message}. Check API responses.`); // Update error message\r\n      setTasks([]); setProjects([]); setUsers([]); // Clear data on error\r\n    } finally {\r\n      console.log(\"fetchData FINALLY - setLoading(false)\"); // DEBUG\r\n      setLoading(false);\r\n    }\r\n  }, [token]);\r\n  // --- End Data Fetching ---\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect running - calling fetchData\"); // DEBUG\r\n    fetchData();\r\n  }, [fetchData]);\r\n\r\n  // --- Modal Handlers ---\r\n  const handleShowCreateModal = () => { /* ... (remains same) ... */ };\r\n  const handleShowEditModal = (task) => { /* ... (remains same) ... */ };\r\n  const handleCloseModal = () => { /* ... (remains same) ... */ };\r\n  const handleInputChange = (e) => { /* ... (remains same) ... */ };\r\n\r\n  // --- Form Submission ---\r\n  const handleSubmit = async (e) => { /* ... (catch block uses e.message) ... */ };\r\n\r\n  // --- Deletion Handler ---\r\n  const handleDelete = async (taskId) => { /* ... (catch block uses e.message) ... */ };\r\n\r\n  // --- Start/Stop Timer Handler ---\r\n  const handleTimerAction = async (taskId, action) => { /* ... (catch block uses e.message) ... */ };\r\n\r\n  // --- Render Logic ---\r\n  if (loading) return ( <div className=\"d-flex justify-content-center align-items-center text-light vh-100\"><Spinner animation=\"border\" className=\"me-2\"/> Loading...</div> );\r\n  if (error && !showModal) return ( <Alert variant=\"danger\" className=\"bg-dark text-light border-danger\">{error}</Alert> ); // Hide general error if modal is open\r\n\r\n  return (\r\n    <div className=\"p-md-4\" style={{ minHeight: '100vh', background: 'linear-gradient(135deg, #232323, #1a1a1a)' }}>\r\n      <div className=\"bg-dark p-4 rounded shadow mb-4\">\r\n        {/* Header, Create Button, Info Messages */}\r\n         {/* ... */}\r\n\r\n        {/* Task Table */}\r\n        {tasks.length > 0 && (\r\n          <div className=\"table-responsive\">\r\n            <Table variant=\"dark\" striped hover responsive=\"sm\" className=\"align-middle\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Title</th><th>Project</th><th>Status</th><th>Priority</th><th>Due Date</th><th>Assignee</th>\r\n                  <th className=\"text-end\">Started</th>\r\n                  <th className=\"text-end\">Ended</th>\r\n                  <th className=\"text-end\">Duration</th>\r\n                  <th className=\"text-center\">Actions</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tasks.map(task => {\r\n                   const isTimerRunning = task.started_at && !task.ended_at;\r\n                   const canStart = !task.started_at;\r\n                   const canStop = isTimerRunning;\r\n                   const isLoading = timerLoadingTaskId === task.id;\r\n                   return ( <tr key={task.id}>{/* ... table cells ... */}</tr> );\r\n                })}\r\n              </tbody>\r\n            </Table>\r\n          </div>\r\n        )}\r\n        {!loading && tasks.length === 0 && projects.length > 0 && <Alert variant=\"info\" className=\"bg-dark text-info border-info mt-3\">No tasks found.</Alert>}\r\n        {!loading && projects.length === 0 && <Alert variant=\"warning\" className=\"bg-dark text-warning border-warning\">Create a project before adding tasks.</Alert>}\r\n      </div>\r\n\r\n      {/* Task Edit/Create Modal (Conditional Status, No Cost field) */}\r\n      <Modal show={showModal} onHide={handleCloseModal} backdrop=\"static\" keyboard={false} centered>\r\n         {/* ... Modal structure ... */}\r\n      </Modal>\r\n\r\n       {/* REMOVED Time Log Modal Rendering */}\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskTable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}