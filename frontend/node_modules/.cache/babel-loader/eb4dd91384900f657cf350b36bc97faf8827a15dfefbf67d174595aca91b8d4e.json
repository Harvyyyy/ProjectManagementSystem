{"ast":null,"code":"var _jsxFileName = \"D:\\\\Harvy\\\\Dev\\\\ProjectManagementSystem\\\\frontend\\\\src\\\\components\\\\Notifications\\\\NotificationBell.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Dropdown, Badge, Spinner, ListGroup, Button } from 'react-bootstrap';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext'; // Adjust path\nimport { API_BASE_URL } from '../../App'; // Adjust path\nimport { formatDate } from '../../utils/formatting'; // Adjust path\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NotificationBell() {\n  _s();\n  const {\n    token\n  } = useAuth();\n  const navigate = useNavigate();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isOpen, setIsOpen] = useState(false); // Manage dropdown visibility\n\n  const fetchNotifications = useCallback(async (fetchType = 'unread') => {\n    // Fetch only unread by default, or all if dropdown is open/refreshed\n    setIsLoading(true);\n    setError(null);\n    // console.log(\"Fetching notifications:\", fetchType);\n\n    try {\n      var _data$meta$unread_cou, _data$meta;\n      const response = await fetch(`${API_BASE_URL}/notifications?status=${fetchType}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"Notifications Data:\", data); // DEBUG\n\n      // Assuming paginated response with metadata including unread_count\n      setNotifications(data.data || []); // Use data array from paginator\n      setUnreadCount((_data$meta$unread_cou = (_data$meta = data.meta) === null || _data$meta === void 0 ? void 0 : _data$meta.unread_count) !== null && _data$meta$unread_cou !== void 0 ? _data$meta$unread_cou : 0); // Get unread count from meta\n    } catch (err) {\n      console.error(\"Failed to fetch notifications:\", err);\n      setError(\"Couldn't load notifications.\");\n      setUnreadCount(0); // Reset count on error\n      setNotifications([]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [token]);\n\n  // Initial fetch and potentially periodic refresh (optional)\n  useEffect(() => {\n    fetchNotifications('unread'); // Fetch initial unread count and maybe first few unread\n\n    // Optional: Set up polling interval to refresh notifications\n    // const intervalId = setInterval(() => fetchNotifications('unread'), 60000); // e.g., every 60 seconds\n    // return () => clearInterval(intervalId); // Cleanup on unmount\n  }, [fetchNotifications]);\n  const handleToggle = nextShowState => {\n    setIsOpen(nextShowState);\n    // Fetch all (or more) notifications when dropdown is opened\n    if (nextShowState && notifications.length < 5) {\n      // Example: Fetch more if few are shown\n      fetchNotifications('all'); // Fetch all or more pages\n    } else if (nextShowState) {\n      // Or just refresh the unread count if already showing some\n      fetchNotifications('unread');\n    }\n  };\n  const handleMarkAsRead = async (notificationId, e) => {\n    e.stopPropagation(); // Prevent dropdown from closing if clicking inside\n\n    // Optimistically reduce count (optional)\n    // setUnreadCount(prev => Math.max(0, prev - 1));\n    // setNotifications(prev => prev.map(n => n.id === notificationId ? {...n, read_at: new Date().toISOString()} : n)); // Optimistic UI update\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/notifications/${notificationId}/read`, {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to mark as read');\n      }\n      // Re-fetch to confirm update and get latest count\n      fetchNotifications(isOpen ? 'all' : 'unread');\n    } catch (err) {\n      console.error(\"Failed to mark notification as read:\", err);\n      setError(\"Failed to update notification status.\");\n      // Revert optimistic update if needed\n    }\n  };\n  const handleNotificationClick = (notification, e) => {\n    var _notification$data;\n    // Mark as read first\n    if (!notification.read_at) {\n      handleMarkAsRead(notification.id, e);\n    }\n    // Then navigate\n    if ((_notification$data = notification.data) !== null && _notification$data !== void 0 && _notification$data.url) {\n      navigate(notification.data.url);\n      setIsOpen(false); // Close dropdown after navigation\n    }\n  };\n\n  // Custom Dropdown Toggle Component\n  const CustomToggle = /*#__PURE__*/React.forwardRef(({\n    children,\n    onClick\n  }, ref) => /*#__PURE__*/_jsxDEV(Button, {\n    ref: ref,\n    onClick: e => {\n      e.preventDefault();\n      onClick(e);\n    },\n    variant: \"dark\" // Match navbar style\n    ,\n    className: \"position-relative border-0\" // Remove button border\n    ,\n    \"aria-label\": \"Notifications\",\n    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n      className: \"bi bi-bell-fill text-white fs-5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), unreadCount > 0 && /*#__PURE__*/_jsxDEV(Badge, {\n      pill: true,\n      bg: \"danger\",\n      className: \"position-absolute top-0 start-100 translate-middle\",\n      style: {\n        fontSize: '0.6em',\n        padding: '0.3em 0.5em'\n      } // Smaller badge\n      ,\n      children: [unreadCount > 9 ? '9+' : unreadCount, /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"visually-hidden\",\n        children: \"unread messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    onToggle: handleToggle,\n    show: isOpen,\n    align: \"end\",\n    children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n      as: CustomToggle,\n      id: \"dropdown-custom-components\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n      variant: \"dark\",\n      className: \"shadow mt-2 dropdown-menu-scrollable\",\n      style: {\n        minWidth: '300px',\n        maxHeight: '400px',\n        overflowY: 'auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Dropdown.Header, {\n        className: \"d-flex justify-content-between align-items-center\",\n        children: \"Notifications\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Dropdown.Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 10\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center p-3\",\n        children: /*#__PURE__*/_jsxDEV(Spinner, {\n          animation: \"border\",\n          size: \"sm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 23\n      }, this), error && !isLoading && /*#__PURE__*/_jsxDEV(Dropdown.ItemText, {\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"danger\",\n          size: \"sm\",\n          className: \"mb-0\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 52\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 33\n      }, this), !isLoading && !error && notifications.length === 0 && /*#__PURE__*/_jsxDEV(Dropdown.ItemText, {\n        className: \"text-muted\",\n        children: \"No new notifications\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), !isLoading && !error && notifications.length > 0 && /*#__PURE__*/_jsxDEV(ListGroup, {\n        variant: \"flush\",\n        children: notifications.map(notification => {\n          var _notification$data2;\n          return /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n            action: true // Makes it look clickable\n            ,\n            onClick: e => handleNotificationClick(notification, e),\n            className: `bg-dark text-light border-secondary px-3 py-2 ${!notification.read_at ? 'bg-opacity-75 fw-bold' : 'text-muted'}`,\n            style: {\n              cursor: 'pointer',\n              opacity: !notification.read_at ? 1 : 0.7\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex justify-content-between align-items-start\",\n              children: [/*#__PURE__*/_jsxDEV(\"small\", {\n                style: {\n                  fontSize: '0.9em'\n                },\n                children: ((_notification$data2 = notification.data) === null || _notification$data2 === void 0 ? void 0 : _notification$data2.message) || 'Notification message missing.'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 28\n              }, this), !notification.read_at && /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"outline-light\",\n                size: \"sm\",\n                className: \"ms-2 border-0\",\n                style: {\n                  lineHeight: '1',\n                  padding: '0.1rem 0.3rem'\n                },\n                onClick: e => handleMarkAsRead(notification.id, e),\n                title: \"Mark as read\",\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"bi bi-check-lg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 36\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 24\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"d-block text-muted\",\n              style: {\n                fontSize: '0.75em'\n              },\n              children: formatDate(notification.created_at, {\n                dateStyle: 'short',\n                timeStyle: 'short'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 24\n            }, this)]\n          }, notification.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 22\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n}\n_s(NotificationBell, \"QgVOi2Dd6d6fVwwELrP7FoUANlU=\", false, function () {\n  return [useAuth, useNavigate];\n});\n_c = NotificationBell;\nexport default NotificationBell;\nvar _c;\n$RefreshReg$(_c, \"NotificationBell\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Dropdown","Badge","Spinner","ListGroup","Button","Link","useNavigate","useAuth","API_BASE_URL","formatDate","jsxDEV","_jsxDEV","NotificationBell","_s","token","navigate","notifications","setNotifications","unreadCount","setUnreadCount","isLoading","setIsLoading","error","setError","isOpen","setIsOpen","fetchNotifications","fetchType","_data$meta$unread_cou","_data$meta","response","fetch","headers","Authorization","Accept","ok","Error","status","data","json","console","log","meta","unread_count","err","handleToggle","nextShowState","length","handleMarkAsRead","notificationId","e","stopPropagation","method","handleNotificationClick","notification","_notification$data","read_at","id","url","CustomToggle","forwardRef","children","onClick","ref","preventDefault","variant","className","fileName","_jsxFileName","lineNumber","columnNumber","pill","bg","style","fontSize","padding","onToggle","show","align","Toggle","as","Menu","minWidth","maxHeight","overflowY","Header","Divider","animation","size","ItemText","Alert","map","_notification$data2","Item","action","cursor","opacity","message","lineHeight","title","created_at","dateStyle","timeStyle","_c","$RefreshReg$"],"sources":["D:/Harvy/Dev/ProjectManagementSystem/frontend/src/components/Notifications/NotificationBell.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Dropdown, Badge, Spinner, ListGroup, Button } from 'react-bootstrap';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../../context/AuthContext'; // Adjust path\r\nimport { API_BASE_URL } from '../../App'; // Adjust path\r\nimport { formatDate } from '../../utils/formatting'; // Adjust path\r\n\r\nfunction NotificationBell() {\r\n  const { token } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [isOpen, setIsOpen] = useState(false); // Manage dropdown visibility\r\n\r\n  const fetchNotifications = useCallback(async (fetchType = 'unread') => {\r\n    // Fetch only unread by default, or all if dropdown is open/refreshed\r\n    setIsLoading(true);\r\n    setError(null);\r\n    // console.log(\"Fetching notifications:\", fetchType);\r\n\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/notifications?status=${fetchType}`, {\r\n        headers: { Authorization: `Bearer ${token}`, Accept: 'application/json' },\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n\r\n      console.log(\"Notifications Data:\", data); // DEBUG\r\n\r\n      // Assuming paginated response with metadata including unread_count\r\n      setNotifications(data.data || []); // Use data array from paginator\r\n      setUnreadCount(data.meta?.unread_count ?? 0); // Get unread count from meta\r\n\r\n    } catch (err) {\r\n      console.error(\"Failed to fetch notifications:\", err);\r\n      setError(\"Couldn't load notifications.\");\r\n      setUnreadCount(0); // Reset count on error\r\n      setNotifications([]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [token]);\r\n\r\n  // Initial fetch and potentially periodic refresh (optional)\r\n  useEffect(() => {\r\n    fetchNotifications('unread'); // Fetch initial unread count and maybe first few unread\r\n\r\n    // Optional: Set up polling interval to refresh notifications\r\n    // const intervalId = setInterval(() => fetchNotifications('unread'), 60000); // e.g., every 60 seconds\r\n    // return () => clearInterval(intervalId); // Cleanup on unmount\r\n\r\n  }, [fetchNotifications]);\r\n\r\n  const handleToggle = (nextShowState) => {\r\n     setIsOpen(nextShowState);\r\n     // Fetch all (or more) notifications when dropdown is opened\r\n     if (nextShowState && notifications.length < 5) { // Example: Fetch more if few are shown\r\n          fetchNotifications('all'); // Fetch all or more pages\r\n     } else if (nextShowState) {\r\n          // Or just refresh the unread count if already showing some\r\n          fetchNotifications('unread');\r\n     }\r\n  };\r\n\r\n  const handleMarkAsRead = async (notificationId, e) => {\r\n      e.stopPropagation(); // Prevent dropdown from closing if clicking inside\r\n\r\n      // Optimistically reduce count (optional)\r\n      // setUnreadCount(prev => Math.max(0, prev - 1));\r\n      // setNotifications(prev => prev.map(n => n.id === notificationId ? {...n, read_at: new Date().toISOString()} : n)); // Optimistic UI update\r\n\r\n      try {\r\n          const response = await fetch(`${API_BASE_URL}/notifications/${notificationId}/read`, {\r\n              method: 'POST',\r\n              headers: { Authorization: `Bearer ${token}`, Accept: 'application/json', 'Content-Type': 'application/json' },\r\n          });\r\n          if (!response.ok) { throw new Error('Failed to mark as read'); }\r\n          // Re-fetch to confirm update and get latest count\r\n          fetchNotifications(isOpen ? 'all' : 'unread');\r\n      } catch (err) {\r\n          console.error(\"Failed to mark notification as read:\", err);\r\n          setError(\"Failed to update notification status.\");\r\n          // Revert optimistic update if needed\r\n      }\r\n  };\r\n\r\n  const handleNotificationClick = (notification, e) => {\r\n    // Mark as read first\r\n    if (!notification.read_at) {\r\n       handleMarkAsRead(notification.id, e);\r\n    }\r\n    // Then navigate\r\n    if (notification.data?.url) {\r\n        navigate(notification.data.url);\r\n        setIsOpen(false); // Close dropdown after navigation\r\n    }\r\n  };\r\n\r\n  // Custom Dropdown Toggle Component\r\n  const CustomToggle = React.forwardRef(({ children, onClick }, ref) => (\r\n    <Button\r\n      ref={ref}\r\n      onClick={(e) => {\r\n        e.preventDefault();\r\n        onClick(e);\r\n      }}\r\n      variant=\"dark\" // Match navbar style\r\n      className=\"position-relative border-0\" // Remove button border\r\n      aria-label=\"Notifications\"\r\n    >\r\n      <i className=\"bi bi-bell-fill text-white fs-5\"></i>\r\n      {unreadCount > 0 && (\r\n        <Badge\r\n          pill\r\n          bg=\"danger\"\r\n          className=\"position-absolute top-0 start-100 translate-middle\"\r\n          style={{ fontSize: '0.6em', padding: '0.3em 0.5em' }} // Smaller badge\r\n        >\r\n          {unreadCount > 9 ? '9+' : unreadCount}\r\n          <span className=\"visually-hidden\">unread messages</span>\r\n        </Badge>\r\n      )}\r\n    </Button>\r\n  ));\r\n\r\n\r\n  return (\r\n    <Dropdown onToggle={handleToggle} show={isOpen} align=\"end\">\r\n      <Dropdown.Toggle as={CustomToggle} id=\"dropdown-custom-components\" />\r\n\r\n      <Dropdown.Menu variant=\"dark\" className=\"shadow mt-2 dropdown-menu-scrollable\" style={{minWidth: '300px', maxHeight: '400px', overflowY: 'auto'}}>\r\n         <Dropdown.Header className=\"d-flex justify-content-between align-items-center\">\r\n             Notifications\r\n             {/* Optional: Add Mark All Read Button */}\r\n             {/* {unreadCount > 0 && <Button variant=\"outline-secondary\" size=\"sm\">Mark All Read</Button>} */}\r\n         </Dropdown.Header>\r\n         <Dropdown.Divider />\r\n\r\n        {isLoading && <div className=\"text-center p-3\"><Spinner animation=\"border\" size=\"sm\" /></div>}\r\n        {error && !isLoading && <Dropdown.ItemText><Alert variant=\"danger\" size=\"sm\" className=\"mb-0\">{error}</Alert></Dropdown.ItemText>}\r\n        {!isLoading && !error && notifications.length === 0 && (\r\n          <Dropdown.ItemText className=\"text-muted\">No new notifications</Dropdown.ItemText>\r\n        )}\r\n\r\n        {!isLoading && !error && notifications.length > 0 && (\r\n             <ListGroup variant=\"flush\">\r\n                 {notifications.map(notification => (\r\n                     <ListGroup.Item\r\n                        key={notification.id}\r\n                        action // Makes it look clickable\r\n                        onClick={(e) => handleNotificationClick(notification, e)}\r\n                        className={`bg-dark text-light border-secondary px-3 py-2 ${!notification.read_at ? 'bg-opacity-75 fw-bold' : 'text-muted'}`}\r\n                        style={{ cursor: 'pointer', opacity: !notification.read_at ? 1 : 0.7 }}\r\n                      >\r\n                       <div className=\"d-flex justify-content-between align-items-start\">\r\n                           <small style={{fontSize: '0.9em'}}>\r\n                               {notification.data?.message || 'Notification message missing.'}\r\n                            </small>\r\n                            {/* Show mark as read button only if unread */}\r\n                            {!notification.read_at && (\r\n                                <Button\r\n                                    variant=\"outline-light\"\r\n                                    size=\"sm\"\r\n                                    className=\"ms-2 border-0\"\r\n                                    style={{ lineHeight: '1', padding: '0.1rem 0.3rem'}}\r\n                                    onClick={(e) => handleMarkAsRead(notification.id, e)}\r\n                                    title=\"Mark as read\"\r\n                                >\r\n                                   <i className=\"bi bi-check-lg\"></i>\r\n                                </Button>\r\n                            )}\r\n                       </div>\r\n                       <small className=\"d-block text-muted\" style={{fontSize: '0.75em'}}>\r\n                           {formatDate(notification.created_at, { dateStyle: 'short', timeStyle: 'short' })}\r\n                        </small>\r\n                     </ListGroup.Item>\r\n                 ))}\r\n             </ListGroup>\r\n        )}\r\n         {/* Optional: Link to see all notifications */}\r\n         {/* <Dropdown.Divider />\r\n         <Dropdown.Item as={Link} to=\"/notifications\" className=\"text-center text-info\">View All</Dropdown.Item> */}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nexport default NotificationBell;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}